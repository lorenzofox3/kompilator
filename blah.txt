{ type: [32m'Program'[39m,
  sourceType: [32m'script'[39m,
  body: 
   [ { type: [32m'ExpressionStatement'[39m,
       expression: { type: [32m'Literal'[39m, value: [32m'use strict'[39m } },
     { type: [32m'ExpressionStatement'[39m,
       expression: 
        { type: [32m'CallExpression'[39m,
          callee: 
           { type: [32m'FunctionExpression'[39m,
             id: [1mnull[22m,
             async: [33mfalse[39m,
             generator: [33mfalse[39m,
             params: 
              [ { type: [32m'Identifier'[39m, name: [32m'global'[39m },
                { type: [32m'Identifier'[39m, name: [32m'factory'[39m } ],
             body: 
              { type: [32m'BlockStatement'[39m,
                body: 
                 [ { type: [32m'ExpressionStatement'[39m,
                     expression: 
                      { type: [32m'ConditionalExpression'[39m,
                        test: 
                         { type: [32m'LogicalExpression'[39m,
                           left: 
                            { type: [32m'BinaryExpression'[39m,
                              left: 
                               { type: [32m'UnaryExpression'[39m,
                                 operator: [32m'typeof'[39m,
                                 argument: { type: [32m'Identifier'[39m, name: [32m'exports'[39m },
                                 prefix: [33mtrue[39m },
                              right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                              operator: [32m'==='[39m },
                           right: 
                            { type: [32m'BinaryExpression'[39m,
                              left: 
                               { type: [32m'UnaryExpression'[39m,
                                 operator: [32m'typeof'[39m,
                                 argument: { type: [32m'Identifier'[39m, name: [32m'module'[39m },
                                 prefix: [33mtrue[39m },
                              right: { type: [32m'Literal'[39m, value: [32m'undefined'[39m },
                              operator: [32m'!=='[39m },
                           operator: [32m'&&'[39m },
                        consequent: 
                         { type: [32m'AssignmentExpression'[39m,
                           left: 
                            { type: [32m'MemberExpression'[39m,
                              object: { type: [32m'Identifier'[39m, name: [32m'module'[39m },
                              computed: [33mfalse[39m,
                              property: { type: [32m'Identifier'[39m, name: [32m'exports'[39m } },
                           right: 
                            { type: [32m'CallExpression'[39m,
                              callee: { type: [32m'Identifier'[39m, name: [32m'factory'[39m },
                              arguments: [] },
                           operator: [32m'='[39m },
                        alternate: 
                         { type: [32m'ConditionalExpression'[39m,
                           test: 
                            { type: [32m'LogicalExpression'[39m,
                              left: 
                               { type: [32m'BinaryExpression'[39m,
                                 left: 
                                  { type: [32m'UnaryExpression'[39m,
                                    operator: [32m'typeof'[39m,
                                    argument: { type: [32m'Identifier'[39m, name: [32m'define'[39m },
                                    prefix: [33mtrue[39m },
                                 right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                 operator: [32m'==='[39m },
                              right: 
                               { type: [32m'MemberExpression'[39m,
                                 object: { type: [32m'Identifier'[39m, name: [32m'define'[39m },
                                 computed: [33mfalse[39m,
                                 property: { type: [32m'Identifier'[39m, name: [32m'amd'[39m } },
                              operator: [32m'&&'[39m },
                           consequent: 
                            { type: [32m'CallExpression'[39m,
                              callee: { type: [32m'Identifier'[39m, name: [32m'define'[39m },
                              arguments: [ { type: [32m'Identifier'[39m, name: [32m'factory'[39m } ] },
                           alternate: 
                            { type: [32m'AssignmentExpression'[39m,
                              left: 
                               { type: [32m'MemberExpression'[39m,
                                 object: { type: [32m'Identifier'[39m, name: [32m'global'[39m },
                                 computed: [33mfalse[39m,
                                 property: { type: [32m'Identifier'[39m, name: [32m'React'[39m } },
                              right: 
                               { type: [32m'CallExpression'[39m,
                                 callee: { type: [32m'Identifier'[39m, name: [32m'factory'[39m },
                                 arguments: [] },
                              operator: [32m'='[39m } } } } ] } },
          arguments: 
           [ { type: [32m'ThisExpression'[39m },
             { type: [32m'FunctionExpression'[39m,
               id: [1mnull[22m,
               async: [33mfalse[39m,
               generator: [33mfalse[39m,
               params: [],
               body: 
                { type: [32m'BlockStatement'[39m,
                  body: 
                   [ { type: [32m'ExpressionStatement'[39m,
                       expression: { type: [32m'Literal'[39m, value: [32m'use strict'[39m } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertySymbols'[39m },
                            init: 
                             { type: [32m'MemberExpression'[39m,
                               object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertySymbols'[39m } } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m },
                            init: 
                             { type: [32m'MemberExpression'[39m,
                               object: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'propIsEnumerable'[39m },
                            init: 
                             { type: [32m'MemberExpression'[39m,
                               object: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'propertyIsEnumerable'[39m } } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'toObject'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'val'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'val'[39m },
                                     right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                     operator: [32m'==='[39m },
                                  right: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'val'[39m },
                                     right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                     operator: [32m'==='[39m },
                                  operator: [32m'||'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ThrowStatement'[39m,
                                       argument: 
                                        { type: [32m'NewExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'TypeError'[39m },
                                          arguments: 
                                           [ { type: [32m'Literal'[39m,
                                               value: [32m'Object.assign cannot be called with null or undefined'[39m } ] } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'val'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'shouldUseNative'[39m },
                       params: [],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'TryStatement'[39m,
                               block: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'UnaryExpression'[39m,
                                          operator: [32m'!'[39m,
                                          argument: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'assign'[39m } },
                                          prefix: [33mtrue[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ReturnStatement'[39m,
                                               argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'test1'[39m },
                                            init: 
                                             { type: [32m'NewExpression'[39m,
                                               callee: { type: [32m'Identifier'[39m, name: [32m'String'[39m },
                                               arguments: [ { type: [32m'Literal'[39m, value: [32m'abc'[39m } ] } } ] },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'test1'[39m },
                                             computed: [33mtrue[39m,
                                             property: { type: [32m'Literal'[39m, value: [33m5[39m } },
                                          right: { type: [32m'Literal'[39m, value: [32m'de'[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: 
                                              { type: [32m'CallExpression'[39m,
                                                callee: 
                                                 { type: [32m'MemberExpression'[39m,
                                                   object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                   computed: [33mfalse[39m,
                                                   property: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertyNames'[39m } },
                                                arguments: [ { type: [32m'Identifier'[39m, name: [32m'test1'[39m } ] },
                                             computed: [33mtrue[39m,
                                             property: { type: [32m'Literal'[39m, value: [33m0[39m } },
                                          right: { type: [32m'Literal'[39m, value: [32m'5'[39m },
                                          operator: [32m'==='[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ReturnStatement'[39m,
                                               argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'test2'[39m },
                                            init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                                     { type: [32m'ForStatement'[39m,
                                       init: 
                                        { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                               init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                          right: { type: [32m'Literal'[39m, value: [33m10[39m },
                                          operator: [32m'<'[39m },
                                       update: 
                                        { type: [32m'UpdateExpression'[39m,
                                          argument: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                          operator: [32m'++'[39m,
                                          prefix: [33mfalse[39m },
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'test2'[39m },
                                                     computed: [33mtrue[39m,
                                                     property: 
                                                      { type: [32m'BinaryExpression'[39m,
                                                        left: { type: [32m'Literal'[39m, value: [32m'_'[39m },
                                                        right: 
                                                         { type: [32m'CallExpression'[39m,
                                                           callee: 
                                                            { type: [32m'MemberExpression'[39m,
                                                              object: { type: [32m'Identifier'[39m, name: [32m'String'[39m },
                                                              computed: [33mfalse[39m,
                                                              property: { type: [32m'Identifier'[39m, name: [32m'fromCharCode'[39m } },
                                                           arguments: [ { type: [32m'Identifier'[39m, name: [32m'i'[39m } ] },
                                                        operator: [32m'+'[39m } },
                                                  right: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                  operator: [32m'='[39m } } ] } },
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'order2'[39m },
                                            init: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertyNames'[39m } },
                                                     arguments: [ { type: [32m'Identifier'[39m, name: [32m'test2'[39m } ] },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'map'[39m } },
                                               arguments: 
                                                [ { type: [32m'FunctionExpression'[39m,
                                                    id: [1mnull[22m,
                                                    async: [33mfalse[39m,
                                                    generator: [33mfalse[39m,
                                                    params: [ { type: [32m'Identifier'[39m, name: [32m'n'[39m } ],
                                                    body: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ReturnStatement'[39m,
                                                            argument: 
                                                             { type: [32m'MemberExpression'[39m,
                                                               object: { type: [32m'Identifier'[39m, name: [32m'test2'[39m },
                                                               computed: [33mtrue[39m,
                                                               property: { type: [32m'Identifier'[39m, name: [32m'n'[39m } } } ] } } ] } } ] },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: 
                                           { type: [32m'CallExpression'[39m,
                                             callee: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'order2'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'join'[39m } },
                                             arguments: [ { type: [32m'Literal'[39m, value: [32m''[39m } ] },
                                          right: { type: [32m'Literal'[39m, value: [32m'0123456789'[39m },
                                          operator: [32m'!=='[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ReturnStatement'[39m,
                                               argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'test3'[39m },
                                            init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: 
                                              { type: [32m'CallExpression'[39m,
                                                callee: 
                                                 { type: [32m'MemberExpression'[39m,
                                                   object: { type: [32m'Literal'[39m, value: [32m'abcdefghijklmnopqrst'[39m },
                                                   computed: [33mfalse[39m,
                                                   property: { type: [32m'Identifier'[39m, name: [32m'split'[39m } },
                                                arguments: [ { type: [32m'Literal'[39m, value: [32m''[39m } ] },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'forEach'[39m } },
                                          arguments: 
                                           [ { type: [32m'FunctionExpression'[39m,
                                               id: [1mnull[22m,
                                               async: [33mfalse[39m,
                                               generator: [33mfalse[39m,
                                               params: [ { type: [32m'Identifier'[39m, name: [32m'letter'[39m } ],
                                               body: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'test3'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'letter'[39m } },
                                                          right: { type: [32m'Identifier'[39m, name: [32m'letter'[39m },
                                                          operator: [32m'='[39m } } ] } } ] } },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: 
                                           { type: [32m'CallExpression'[39m,
                                             callee: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: 
                                                 { type: [32m'CallExpression'[39m,
                                                   callee: 
                                                    { type: [32m'MemberExpression'[39m,
                                                      object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                      computed: [33mfalse[39m,
                                                      property: { type: [32m'Identifier'[39m, name: [32m'keys'[39m } },
                                                   arguments: 
                                                    [ { type: [32m'CallExpression'[39m,
                                                        callee: 
                                                         { type: [32m'MemberExpression'[39m,
                                                           object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                           computed: [33mfalse[39m,
                                                           property: { type: [32m'Identifier'[39m, name: [32m'assign'[39m } },
                                                        arguments: 
                                                         [ { type: [32m'ObjectExpression'[39m, properties: [] },
                                                           { type: [32m'Identifier'[39m, name: [32m'test3'[39m } ] } ] },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'join'[39m } },
                                             arguments: [ { type: [32m'Literal'[39m, value: [32m''[39m } ] },
                                          right: { type: [32m'Literal'[39m, value: [32m'abcdefghijklmnopqrst'[39m },
                                          operator: [32m'!=='[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ReturnStatement'[39m,
                                               argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Literal'[39m, value: [33mtrue[39m } } ] },
                               handler: 
                                { type: [32m'CatchClause'[39m,
                                  param: { type: [32m'Identifier'[39m, name: [32m'err'[39m },
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'ReturnStatement'[39m,
                                          argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] } },
                               finalizer: [1mnull[22m } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'objectAssign$1'[39m },
                            init: 
                             { type: [32m'ConditionalExpression'[39m,
                               test: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'shouldUseNative'[39m },
                                  arguments: [] },
                               consequent: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'assign'[39m } },
                               alternate: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: [1mnull[22m,
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'target'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'source'[39m } ],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                               init: [1mnull[22m } ] },
                                        { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'to'[39m },
                                               init: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'toObject'[39m },
                                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'target'[39m } ] } } ] },
                                        { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                               init: [1mnull[22m } ] },
                                        { type: [32m'ForStatement'[39m,
                                          init: 
                                           { type: [32m'VariableDeclaration'[39m,
                                             kind: [32m'var'[39m,
                                             declarations: 
                                              [ { type: [32m'VariableDeclarator'[39m,
                                                  id: { type: [32m'Identifier'[39m, name: [32m's'[39m },
                                                  init: { type: [32m'Literal'[39m, value: [33m1[39m } } ] },
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m's'[39m },
                                             right: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                             operator: [32m'<'[39m },
                                          update: 
                                           { type: [32m'UpdateExpression'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m's'[39m },
                                             operator: [32m'++'[39m,
                                             prefix: [33mfalse[39m },
                                          body: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'AssignmentExpression'[39m,
                                                     left: { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                     right: 
                                                      { type: [32m'CallExpression'[39m,
                                                        callee: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                        arguments: 
                                                         [ { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m's'[39m } } ] },
                                                     operator: [32m'='[39m } },
                                                { type: [32m'ForInStatement'[39m,
                                                  left: 
                                                   { type: [32m'VariableDeclaration'[39m,
                                                     kind: [32m'var'[39m,
                                                     declarations: 
                                                      [ { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                                          init: [1mnull[22m } ] },
                                                  right: { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                  body: 
                                                   { type: [32m'BlockStatement'[39m,
                                                     body: 
                                                      [ { type: [32m'IfStatement'[39m,
                                                          test: 
                                                           { type: [32m'CallExpression'[39m,
                                                             callee: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m },
                                                                computed: [33mfalse[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                                             arguments: 
                                                              [ { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                                { type: [32m'Identifier'[39m, name: [32m'key'[39m } ] },
                                                          consequent: 
                                                           { type: [32m'BlockStatement'[39m,
                                                             body: 
                                                              [ { type: [32m'ExpressionStatement'[39m,
                                                                  expression: 
                                                                   { type: [32m'AssignmentExpression'[39m,
                                                                     left: 
                                                                      { type: [32m'MemberExpression'[39m,
                                                                        object: { type: [32m'Identifier'[39m, name: [32m'to'[39m },
                                                                        computed: [33mtrue[39m,
                                                                        property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                                     right: 
                                                                      { type: [32m'MemberExpression'[39m,
                                                                        object: { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                                        computed: [33mtrue[39m,
                                                                        property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                                     operator: [32m'='[39m } } ] },
                                                          alternate: [1mnull[22m } ] } },
                                                { type: [32m'IfStatement'[39m,
                                                  test: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertySymbols'[39m },
                                                  consequent: 
                                                   { type: [32m'BlockStatement'[39m,
                                                     body: 
                                                      [ { type: [32m'ExpressionStatement'[39m,
                                                          expression: 
                                                           { type: [32m'AssignmentExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                                             right: 
                                                              { type: [32m'CallExpression'[39m,
                                                                callee: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertySymbols'[39m },
                                                                arguments: [ { type: [32m'Identifier'[39m, name: [32m'from'[39m } ] },
                                                             operator: [32m'='[39m } },
                                                        { type: [32m'ForStatement'[39m,
                                                          init: 
                                                           { type: [32m'VariableDeclaration'[39m,
                                                             kind: [32m'var'[39m,
                                                             declarations: 
                                                              [ { type: [32m'VariableDeclarator'[39m,
                                                                  id: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                                  init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                                          test: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                             right: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                                                computed: [33mfalse[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                                             operator: [32m'<'[39m },
                                                          update: 
                                                           { type: [32m'UpdateExpression'[39m,
                                                             argument: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                             operator: [32m'++'[39m,
                                                             prefix: [33mfalse[39m },
                                                          body: 
                                                           { type: [32m'BlockStatement'[39m,
                                                             body: 
                                                              [ { type: [32m'IfStatement'[39m,
                                                                  test: 
                                                                   { type: [32m'CallExpression'[39m,
                                                                     callee: 
                                                                      { type: [32m'MemberExpression'[39m,
                                                                        object: { type: [32m'Identifier'[39m, name: [32m'propIsEnumerable'[39m },
                                                                        computed: [33mfalse[39m,
                                                                        property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                                                     arguments: 
                                                                      [ { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                                        { type: [32m'MemberExpression'[39m,
                                                                          object: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                                                          computed: [33mtrue[39m,
                                                                          property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } } ] },
                                                                  consequent: 
                                                                   { type: [32m'BlockStatement'[39m,
                                                                     body: 
                                                                      [ { type: [32m'ExpressionStatement'[39m,
                                                                          expression: 
                                                                           { type: [32m'AssignmentExpression'[39m,
                                                                             left: 
                                                                              { type: [32m'MemberExpression'[39m,
                                                                                object: { type: [32m'Identifier'[39m, name: [32m'to'[39m },
                                                                                computed: [33mtrue[39m,
                                                                                property: 
                                                                                 { type: [32m'MemberExpression'[39m,
                                                                                   object: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                                                                   computed: [33mtrue[39m,
                                                                                   property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } } },
                                                                             right: 
                                                                              { type: [32m'MemberExpression'[39m,
                                                                                object: { type: [32m'Identifier'[39m, name: [32m'from'[39m },
                                                                                computed: [33mtrue[39m,
                                                                                property: 
                                                                                 { type: [32m'MemberExpression'[39m,
                                                                                   object: { type: [32m'Identifier'[39m, name: [32m'symbols'[39m },
                                                                                   computed: [33mtrue[39m,
                                                                                   property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } } },
                                                                             operator: [32m'='[39m } } ] },
                                                                  alternate: [1mnull[22m } ] } } ] },
                                                  alternate: [1mnull[22m } ] } },
                                        { type: [32m'ReturnStatement'[39m,
                                          argument: { type: [32m'Identifier'[39m, name: [32m'to'[39m } } ] } } } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactVersion'[39m },
                            init: { type: [32m'Literal'[39m, value: [32m'16.1.1'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'validateFormat'[39m },
                            init: 
                             { type: [32m'FunctionExpression'[39m,
                               id: { type: [32m'Identifier'[39m, name: [32m'validateFormat'[39m },
                               async: [33mfalse[39m,
                               generator: [33mfalse[39m,
                               params: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                               body: { type: [32m'BlockStatement'[39m, body: [] } } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: { type: [32m'Identifier'[39m, name: [32m'validateFormat'[39m },
                               right: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: { type: [32m'Identifier'[39m, name: [32m'validateFormat'[39m },
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                             operator: [32m'==='[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ThrowStatement'[39m,
                                                  argument: 
                                                   { type: [32m'NewExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                     arguments: 
                                                      [ { type: [32m'Literal'[39m,
                                                          value: [32m'invariant requires an error message argument'[39m } ] } } ] },
                                          alternate: [1mnull[22m } ] } },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'invariant'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'a'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'b'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'c'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'd'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'e'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'f'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'validateFormat'[39m },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ] } },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'UnaryExpression'[39m,
                                  operator: [32m'!'[39m,
                                  argument: { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                                  prefix: [33mtrue[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                            init: [1mnull[22m } ] },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                          right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                          operator: [32m'==='[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                  right: 
                                                   { type: [32m'NewExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                     arguments: 
                                                      [ { type: [32m'BinaryExpression'[39m,
                                                          left: 
                                                           { type: [32m'Literal'[39m,
                                                             value: [32m'Minified exception occurred; use the non-minified dev environment '[39m },
                                                          right: 
                                                           { type: [32m'Literal'[39m,
                                                             value: [32m'for the full error message and additional helpful warnings.'[39m },
                                                          operator: [32m'+'[39m } ] },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                    init: 
                                                     { type: [32m'ArrayExpression'[39m,
                                                       elements: 
                                                        [ { type: [32m'Identifier'[39m, name: [32m'a'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'b'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'c'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'd'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'e'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'f'[39m } ] } } ] },
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                    init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                             { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                  right: 
                                                   { type: [32m'NewExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                     arguments: 
                                                      [ { type: [32m'CallExpression'[39m,
                                                          callee: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                                          arguments: 
                                                           [ { type: [32m'Literal'[39m,
                                                               value: [31m/%s/g[39m,
                                                               regex: { pattern: [32m'%s'[39m, flags: [32m'g'[39m } },
                                                             { type: [32m'FunctionExpression'[39m,
                                                               id: [1mnull[22m,
                                                               async: [33mfalse[39m,
                                                               generator: [33mfalse[39m,
                                                               params: [],
                                                               body: 
                                                                { type: [32m'BlockStatement'[39m,
                                                                  body: 
                                                                   [ { type: [32m'ReturnStatement'[39m,
                                                                       argument: 
                                                                        { type: [32m'MemberExpression'[39m,
                                                                          object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                                          computed: [33mtrue[39m,
                                                                          property: 
                                                                           { type: [32m'UpdateExpression'[39m,
                                                                             argument: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                                             operator: [32m'++'[39m,
                                                                             prefix: [33mfalse[39m } } } ] } } ] } ] },
                                                  operator: [32m'='[39m } },
                                             { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'name'[39m } },
                                                  right: { type: [32m'Literal'[39m, value: [32m'Invariant Violation'[39m },
                                                  operator: [32m'='[39m } } ] } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'framesToPop'[39m } },
                                          right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ThrowStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'error'[39m } } ] },
                               alternate: [1mnull[22m } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'invariant_1$1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'invariant'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'enableReactFragment'[39m },
                            init: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'emptyObject'[39m },
                            init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'CallExpression'[39m,
                               callee: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                               arguments: [ { type: [32m'Identifier'[39m, name: [32m'emptyObject'[39m } ] } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'emptyObject_1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'emptyObject'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'lowPriorityWarning'[39m },
                            init: 
                             { type: [32m'FunctionExpression'[39m,
                               id: [1mnull[22m,
                               async: [33mfalse[39m,
                               generator: [33mfalse[39m,
                               params: [],
                               body: { type: [32m'BlockStatement'[39m, body: [] } } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'printWarning'[39m },
                                 init: 
                                  { type: [32m'FunctionExpression'[39m,
                                    id: [1mnull[22m,
                                    async: [33mfalse[39m,
                                    generator: [33mfalse[39m,
                                    params: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                                    body: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'ForStatement'[39m,
                                            init: 
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                    init: 
                                                     { type: [32m'MemberExpression'[39m,
                                                       object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                       computed: [33mfalse[39m,
                                                       property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } } },
                                                  { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                    init: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                       arguments: 
                                                        [ { type: [32m'ConditionalExpression'[39m,
                                                            test: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                               operator: [32m'>'[39m },
                                                            consequent: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                               operator: [32m'-'[39m },
                                                            alternate: { type: [32m'Literal'[39m, value: [33m0[39m } } ] } },
                                                  { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                                    init: { type: [32m'Literal'[39m, value: [33m1[39m } } ] },
                                            test: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                               right: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                               operator: [32m'<'[39m },
                                            update: 
                                             { type: [32m'UpdateExpression'[39m,
                                               argument: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                               operator: [32m'++'[39m,
                                               prefix: [33mfalse[39m },
                                            body: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'AssignmentExpression'[39m,
                                                       left: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                          computed: [33mtrue[39m,
                                                          property: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                                             right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                             operator: [32m'-'[39m } },
                                                       right: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                          computed: [33mtrue[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'_key'[39m } },
                                                       operator: [32m'='[39m } } ] } },
                                          { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                 init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                          { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'message'[39m },
                                                 init: 
                                                  { type: [32m'BinaryExpression'[39m,
                                                    left: { type: [32m'Literal'[39m, value: [32m'Warning: '[39m },
                                                    right: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                                       arguments: 
                                                        [ { type: [32m'Literal'[39m,
                                                            value: [31m/%s/g[39m,
                                                            regex: { pattern: [32m'%s'[39m, flags: [32m'g'[39m } },
                                                          { type: [32m'FunctionExpression'[39m,
                                                            id: [1mnull[22m,
                                                            async: [33mfalse[39m,
                                                            generator: [33mfalse[39m,
                                                            params: [],
                                                            body: 
                                                             { type: [32m'BlockStatement'[39m,
                                                               body: 
                                                                [ { type: [32m'ReturnStatement'[39m,
                                                                    argument: 
                                                                     { type: [32m'MemberExpression'[39m,
                                                                       object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                                       computed: [33mtrue[39m,
                                                                       property: 
                                                                        { type: [32m'UpdateExpression'[39m,
                                                                          argument: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                                          operator: [32m'++'[39m,
                                                                          prefix: [33mfalse[39m } } } ] } } ] },
                                                    operator: [32m'+'[39m } } ] },
                                          { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: 
                                                { type: [32m'UnaryExpression'[39m,
                                                  operator: [32m'typeof'[39m,
                                                  argument: { type: [32m'Identifier'[39m, name: [32m'console'[39m },
                                                  prefix: [33mtrue[39m },
                                               right: { type: [32m'Literal'[39m, value: [32m'undefined'[39m },
                                               operator: [32m'!=='[39m },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'console'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'warn'[39m } },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'message'[39m } ] } } ] },
                                            alternate: [1mnull[22m },
                                          { type: [32m'TryStatement'[39m,
                                            block: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ThrowStatement'[39m,
                                                    argument: 
                                                     { type: [32m'NewExpression'[39m,
                                                       callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'message'[39m } ] } } ] },
                                            handler: 
                                             { type: [32m'CatchClause'[39m,
                                               param: { type: [32m'Identifier'[39m, name: [32m'x'[39m },
                                               body: { type: [32m'BlockStatement'[39m, body: [] } },
                                            finalizer: [1mnull[22m } ] } } } ] },
                          { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: { type: [32m'Identifier'[39m, name: [32m'lowPriorityWarning'[39m },
                               right: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: [1mnull[22m,
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                             operator: [32m'==='[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ThrowStatement'[39m,
                                                  argument: 
                                                   { type: [32m'NewExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                     arguments: 
                                                      [ { type: [32m'BinaryExpression'[39m,
                                                          left: 
                                                           { type: [32m'Literal'[39m,
                                                             value: [32m'`warning(condition, format, ...args)` requires a warning '[39m },
                                                          right: { type: [32m'Literal'[39m, value: [32m'message argument'[39m },
                                                          operator: [32m'+'[39m } ] } } ] },
                                          alternate: [1mnull[22m },
                                        { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'UnaryExpression'[39m,
                                             operator: [32m'!'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                                             prefix: [33mtrue[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ForStatement'[39m,
                                                  init: 
                                                   { type: [32m'VariableDeclaration'[39m,
                                                     kind: [32m'var'[39m,
                                                     declarations: 
                                                      [ { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                          init: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } } },
                                                        { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                          init: 
                                                           { type: [32m'CallExpression'[39m,
                                                             callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                             arguments: 
                                                              [ { type: [32m'ConditionalExpression'[39m,
                                                                  test: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                                     right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                     operator: [32m'>'[39m },
                                                                  consequent: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                                     right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                     operator: [32m'-'[39m },
                                                                  alternate: { type: [32m'Literal'[39m, value: [33m0[39m } } ] } },
                                                        { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                          init: { type: [32m'Literal'[39m, value: [33m2[39m } } ] },
                                                  test: 
                                                   { type: [32m'BinaryExpression'[39m,
                                                     left: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                     right: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                     operator: [32m'<'[39m },
                                                  update: 
                                                   { type: [32m'UpdateExpression'[39m,
                                                     argument: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                     operator: [32m'++'[39m,
                                                     prefix: [33mfalse[39m },
                                                  body: 
                                                   { type: [32m'BlockStatement'[39m,
                                                     body: 
                                                      [ { type: [32m'ExpressionStatement'[39m,
                                                          expression: 
                                                           { type: [32m'AssignmentExpression'[39m,
                                                             left: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                                computed: [33mtrue[39m,
                                                                property: 
                                                                 { type: [32m'BinaryExpression'[39m,
                                                                   left: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                                   right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                   operator: [32m'-'[39m } },
                                                             right: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                                computed: [33mtrue[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m } },
                                                             operator: [32m'='[39m } } ] } },
                                                { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'printWarning'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'apply'[39m } },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                        { type: [32m'CallExpression'[39m,
                                                          callee: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: 
                                                              { type: [32m'ArrayExpression'[39m,
                                                                elements: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ] },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'concat'[39m } },
                                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'args'[39m } ] } ] } } ] },
                                          alternate: [1mnull[22m } ] } },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'lowPriorityWarning$1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'lowPriorityWarning'[39m } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'makeEmptyFunction'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'arg'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: [1mnull[22m,
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: [],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'ReturnStatement'[39m,
                                          argument: { type: [32m'Identifier'[39m, name: [32m'arg'[39m } } ] } } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                            init: 
                             { type: [32m'FunctionExpression'[39m,
                               id: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                               async: [33mfalse[39m,
                               generator: [33mfalse[39m,
                               params: [],
                               body: { type: [32m'BlockStatement'[39m, body: [] } } } ] },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturns'[39m } },
                          right: { type: [32m'Identifier'[39m, name: [32m'makeEmptyFunction'[39m },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsFalse'[39m } },
                          right: 
                           { type: [32m'CallExpression'[39m,
                             callee: { type: [32m'Identifier'[39m, name: [32m'makeEmptyFunction'[39m },
                             arguments: [ { type: [32m'Literal'[39m, value: [33mfalse[39m } ] },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsTrue'[39m } },
                          right: 
                           { type: [32m'CallExpression'[39m,
                             callee: { type: [32m'Identifier'[39m, name: [32m'makeEmptyFunction'[39m },
                             arguments: [ { type: [32m'Literal'[39m, value: [33mtrue[39m } ] },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsNull'[39m } },
                          right: 
                           { type: [32m'CallExpression'[39m,
                             callee: { type: [32m'Identifier'[39m, name: [32m'makeEmptyFunction'[39m },
                             arguments: [ { type: [32m'Literal'[39m, value: [1mnull[22m } ] },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsThis'[39m } },
                          right: 
                           { type: [32m'FunctionExpression'[39m,
                             id: [1mnull[22m,
                             async: [33mfalse[39m,
                             generator: [33mfalse[39m,
                             params: [],
                             body: 
                              { type: [32m'BlockStatement'[39m,
                                body: 
                                 [ { type: [32m'ReturnStatement'[39m,
                                     argument: { type: [32m'ThisExpression'[39m } } ] } },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsArgument'[39m } },
                          right: 
                           { type: [32m'FunctionExpression'[39m,
                             id: [1mnull[22m,
                             async: [33mfalse[39m,
                             generator: [33mfalse[39m,
                             params: [ { type: [32m'Identifier'[39m, name: [32m'arg'[39m } ],
                             body: 
                              { type: [32m'BlockStatement'[39m,
                                body: 
                                 [ { type: [32m'ReturnStatement'[39m,
                                     argument: { type: [32m'Identifier'[39m, name: [32m'arg'[39m } } ] } },
                          operator: [32m'='[39m } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'emptyFunction_1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'emptyFunction'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'warning'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'emptyFunction_1'[39m } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'printWarning$1'[39m },
                                 init: 
                                  { type: [32m'FunctionExpression'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'printWarning'[39m },
                                    async: [33mfalse[39m,
                                    generator: [33mfalse[39m,
                                    params: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                                    body: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'ForStatement'[39m,
                                            init: 
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                    init: 
                                                     { type: [32m'MemberExpression'[39m,
                                                       object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                       computed: [33mfalse[39m,
                                                       property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } } },
                                                  { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                    init: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                       arguments: 
                                                        [ { type: [32m'ConditionalExpression'[39m,
                                                            test: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                               operator: [32m'>'[39m },
                                                            consequent: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                               operator: [32m'-'[39m },
                                                            alternate: { type: [32m'Literal'[39m, value: [33m0[39m } } ] } },
                                                  { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                                    init: { type: [32m'Literal'[39m, value: [33m1[39m } } ] },
                                            test: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                               right: { type: [32m'Identifier'[39m, name: [32m'_len'[39m },
                                               operator: [32m'<'[39m },
                                            update: 
                                             { type: [32m'UpdateExpression'[39m,
                                               argument: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                               operator: [32m'++'[39m,
                                               prefix: [33mfalse[39m },
                                            body: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'AssignmentExpression'[39m,
                                                       left: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                          computed: [33mtrue[39m,
                                                          property: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'_key'[39m },
                                                             right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                                             operator: [32m'-'[39m } },
                                                       right: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                          computed: [33mtrue[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'_key'[39m } },
                                                       operator: [32m'='[39m } } ] } },
                                          { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                 init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                          { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'message'[39m },
                                                 init: 
                                                  { type: [32m'BinaryExpression'[39m,
                                                    left: { type: [32m'Literal'[39m, value: [32m'Warning: '[39m },
                                                    right: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                                       arguments: 
                                                        [ { type: [32m'Literal'[39m,
                                                            value: [31m/%s/g[39m,
                                                            regex: { pattern: [32m'%s'[39m, flags: [32m'g'[39m } },
                                                          { type: [32m'FunctionExpression'[39m,
                                                            id: [1mnull[22m,
                                                            async: [33mfalse[39m,
                                                            generator: [33mfalse[39m,
                                                            params: [],
                                                            body: 
                                                             { type: [32m'BlockStatement'[39m,
                                                               body: 
                                                                [ { type: [32m'ReturnStatement'[39m,
                                                                    argument: 
                                                                     { type: [32m'MemberExpression'[39m,
                                                                       object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                                       computed: [33mtrue[39m,
                                                                       property: 
                                                                        { type: [32m'UpdateExpression'[39m,
                                                                          argument: { type: [32m'Identifier'[39m, name: [32m'argIndex'[39m },
                                                                          operator: [32m'++'[39m,
                                                                          prefix: [33mfalse[39m } } } ] } } ] },
                                                    operator: [32m'+'[39m } } ] },
                                          { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: 
                                                { type: [32m'UnaryExpression'[39m,
                                                  operator: [32m'typeof'[39m,
                                                  argument: { type: [32m'Identifier'[39m, name: [32m'console'[39m },
                                                  prefix: [33mtrue[39m },
                                               right: { type: [32m'Literal'[39m, value: [32m'undefined'[39m },
                                               operator: [32m'!=='[39m },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'console'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'error'[39m } },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'message'[39m } ] } } ] },
                                            alternate: [1mnull[22m },
                                          { type: [32m'TryStatement'[39m,
                                            block: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ThrowStatement'[39m,
                                                    argument: 
                                                     { type: [32m'NewExpression'[39m,
                                                       callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'message'[39m } ] } } ] },
                                            handler: 
                                             { type: [32m'CatchClause'[39m,
                                               param: { type: [32m'Identifier'[39m, name: [32m'x'[39m },
                                               body: { type: [32m'BlockStatement'[39m, body: [] } },
                                            finalizer: [1mnull[22m } ] } } } ] },
                          { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: { type: [32m'Identifier'[39m, name: [32m'warning'[39m },
                               right: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: { type: [32m'Identifier'[39m, name: [32m'warning'[39m },
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'format'[39m } ],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                             operator: [32m'==='[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ThrowStatement'[39m,
                                                  argument: 
                                                   { type: [32m'NewExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                     arguments: 
                                                      [ { type: [32m'BinaryExpression'[39m,
                                                          left: 
                                                           { type: [32m'Literal'[39m,
                                                             value: [32m'`warning(condition, format, ...args)` requires a warning '[39m },
                                                          right: { type: [32m'Literal'[39m, value: [32m'message argument'[39m },
                                                          operator: [32m'+'[39m } ] } } ] },
                                          alternate: [1mnull[22m },
                                        { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: 
                                              { type: [32m'CallExpression'[39m,
                                                callee: 
                                                 { type: [32m'MemberExpression'[39m,
                                                   object: { type: [32m'Identifier'[39m, name: [32m'format'[39m },
                                                   computed: [33mfalse[39m,
                                                   property: { type: [32m'Identifier'[39m, name: [32m'indexOf'[39m } },
                                                arguments: [ { type: [32m'Literal'[39m, value: [32m'Failed Composite propType: '[39m } ] },
                                             right: { type: [32m'Literal'[39m, value: [33m0[39m },
                                             operator: [32m'==='[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: [ { type: [32m'ReturnStatement'[39m, argument: [1mnull[22m } ] },
                                          alternate: [1mnull[22m },
                                        { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'UnaryExpression'[39m,
                                             operator: [32m'!'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m'condition'[39m },
                                             prefix: [33mtrue[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ForStatement'[39m,
                                                  init: 
                                                   { type: [32m'VariableDeclaration'[39m,
                                                     kind: [32m'var'[39m,
                                                     declarations: 
                                                      [ { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                          init: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } } },
                                                        { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                          init: 
                                                           { type: [32m'CallExpression'[39m,
                                                             callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                             arguments: 
                                                              [ { type: [32m'ConditionalExpression'[39m,
                                                                  test: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                                     right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                     operator: [32m'>'[39m },
                                                                  consequent: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                                     right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                     operator: [32m'-'[39m },
                                                                  alternate: { type: [32m'Literal'[39m, value: [33m0[39m } } ] } },
                                                        { type: [32m'VariableDeclarator'[39m,
                                                          id: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                          init: { type: [32m'Literal'[39m, value: [33m2[39m } } ] },
                                                  test: 
                                                   { type: [32m'BinaryExpression'[39m,
                                                     left: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                     right: { type: [32m'Identifier'[39m, name: [32m'_len2'[39m },
                                                     operator: [32m'<'[39m },
                                                  update: 
                                                   { type: [32m'UpdateExpression'[39m,
                                                     argument: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                     operator: [32m'++'[39m,
                                                     prefix: [33mfalse[39m },
                                                  body: 
                                                   { type: [32m'BlockStatement'[39m,
                                                     body: 
                                                      [ { type: [32m'ExpressionStatement'[39m,
                                                          expression: 
                                                           { type: [32m'AssignmentExpression'[39m,
                                                             left: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'args'[39m },
                                                                computed: [33mtrue[39m,
                                                                property: 
                                                                 { type: [32m'BinaryExpression'[39m,
                                                                   left: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m },
                                                                   right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                                   operator: [32m'-'[39m } },
                                                             right: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                                computed: [33mtrue[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'_key2'[39m } },
                                                             operator: [32m'='[39m } } ] } },
                                                { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'printWarning$1'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'apply'[39m } },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                        { type: [32m'CallExpression'[39m,
                                                          callee: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: 
                                                              { type: [32m'ArrayExpression'[39m,
                                                                elements: [ { type: [32m'Identifier'[39m, name: [32m'format'[39m } ] },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'concat'[39m } },
                                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'args'[39m } ] } ] } } ] },
                                          alternate: [1mnull[22m } ] } },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'warning'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: 
                             { type: [32m'Identifier'[39m,
                               name: [32m'didWarnStateUpdateForUnmountedComponent'[39m },
                            init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'warnNoop'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'VariableDeclaration'[39m,
                                    kind: [32m'var'[39m,
                                    declarations: 
                                     [ { type: [32m'VariableDeclarator'[39m,
                                         id: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m },
                                         init: 
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m } } } ] },
                                  { type: [32m'VariableDeclaration'[39m,
                                    kind: [32m'var'[39m,
                                    declarations: 
                                     [ { type: [32m'VariableDeclarator'[39m,
                                         id: { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                                         init: 
                                          { type: [32m'LogicalExpression'[39m,
                                            left: 
                                             { type: [32m'LogicalExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m },
                                               right: 
                                                { type: [32m'LogicalExpression'[39m,
                                                  left: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'name'[39m } },
                                                  operator: [32m'||'[39m },
                                               operator: [32m'&&'[39m },
                                            right: { type: [32m'Literal'[39m, value: [32m'ReactClass'[39m },
                                            operator: [32m'||'[39m } } ] },
                                  { type: [32m'VariableDeclaration'[39m,
                                    kind: [32m'var'[39m,
                                    declarations: 
                                     [ { type: [32m'VariableDeclarator'[39m,
                                         id: { type: [32m'Identifier'[39m, name: [32m'warningKey'[39m },
                                         init: 
                                          { type: [32m'BinaryExpression'[39m,
                                            left: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                                               right: { type: [32m'Literal'[39m, value: [32m'.'[39m },
                                               operator: [32m'+'[39m },
                                            right: { type: [32m'Identifier'[39m, name: [32m'callerName'[39m },
                                            operator: [32m'+'[39m } } ] },
                                  { type: [32m'IfStatement'[39m,
                                    test: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: 
                                        { type: [32m'Identifier'[39m,
                                          name: [32m'didWarnStateUpdateForUnmountedComponent'[39m },
                                       computed: [33mtrue[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'warningKey'[39m } },
                                    consequent: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: [ { type: [32m'ReturnStatement'[39m, argument: [1mnull[22m } ] },
                                    alternate: [1mnull[22m },
                                  { type: [32m'ExpressionStatement'[39m,
                                    expression: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m },
                                       arguments: 
                                        [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                          { type: [32m'BinaryExpression'[39m,
                                            left: 
                                             { type: [32m'BinaryExpression'[39m,
                                               left: 
                                                { type: [32m'Literal'[39m,
                                                  value: [32m'%s(...): Can only update a mounted or mounting component. '[39m },
                                               right: 
                                                { type: [32m'Literal'[39m,
                                                  value: [32m'This usually means you called %s() on an unmounted component. '[39m },
                                               operator: [32m'+'[39m },
                                            right: 
                                             { type: [32m'Literal'[39m,
                                               value: [32m'This is a no-op.\\n\\nPlease check the code for the %s component.'[39m },
                                            operator: [32m'+'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'componentName'[39m } ] } },
                                  { type: [32m'ExpressionStatement'[39m,
                                    expression: 
                                     { type: [32m'AssignmentExpression'[39m,
                                       left: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: 
                                           { type: [32m'Identifier'[39m,
                                             name: [32m'didWarnStateUpdateForUnmountedComponent'[39m },
                                          computed: [33mtrue[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'warningKey'[39m } },
                                       right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                       operator: [32m'='[39m } } ] } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactNoopUpdateQueue'[39m },
                            init: 
                             { type: [32m'ObjectExpression'[39m,
                               properties: 
                                [ { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m } ],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ReturnStatement'[39m,
                                               argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] } },
                                    key: { type: [32m'Identifier'[39m, name: [32m'isMounted'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m } ],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'warnNoop'[39m },
                                                  arguments: 
                                                   [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                                     { type: [32m'Literal'[39m, value: [32m'forceUpdate'[39m } ] } } ] } },
                                    key: { type: [32m'Identifier'[39m, name: [32m'enqueueForceUpdate'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'completeState'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m } ],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'warnNoop'[39m },
                                                  arguments: 
                                                   [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                                     { type: [32m'Literal'[39m, value: [32m'replaceState'[39m } ] } } ] } },
                                    key: { type: [32m'Identifier'[39m, name: [32m'enqueueReplaceState'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'callerName'[39m } ],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'warnNoop'[39m },
                                                  arguments: 
                                                   [ { type: [32m'Identifier'[39m, name: [32m'publicInstance'[39m },
                                                     { type: [32m'Literal'[39m, value: [32m'setState'[39m } ] } } ] } },
                                    key: { type: [32m'Identifier'[39m, name: [32m'enqueueSetState'[39m } } ] } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'updater'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'refs'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'emptyObject_1'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'updater'[39m } },
                                  right: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'updater'[39m },
                                     right: { type: [32m'Identifier'[39m, name: [32m'ReactNoopUpdateQueue'[39m },
                                     operator: [32m'||'[39m },
                                  operator: [32m'='[39m } } ] } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: 
                              { type: [32m'MemberExpression'[39m,
                                object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                                computed: [33mfalse[39m,
                                property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'isReactComponent'[39m } },
                          right: { type: [32m'ObjectExpression'[39m, properties: [] },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: 
                              { type: [32m'MemberExpression'[39m,
                                object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                                computed: [33mfalse[39m,
                                property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'setState'[39m } },
                          right: 
                           { type: [32m'FunctionExpression'[39m,
                             id: [1mnull[22m,
                             async: [33mfalse[39m,
                             generator: [33mfalse[39m,
                             params: 
                              [ { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                { type: [32m'Identifier'[39m, name: [32m'callback'[39m } ],
                             body: 
                              { type: [32m'BlockStatement'[39m,
                                body: 
                                 [ { type: [32m'ExpressionStatement'[39m,
                                     expression: 
                                      { type: [32m'ConditionalExpression'[39m,
                                        test: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'!'[39m,
                                           argument: 
                                            { type: [32m'LogicalExpression'[39m,
                                              left: 
                                               { type: [32m'LogicalExpression'[39m,
                                                 left: 
                                                  { type: [32m'BinaryExpression'[39m,
                                                    left: 
                                                     { type: [32m'UnaryExpression'[39m,
                                                       operator: [32m'typeof'[39m,
                                                       argument: { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                                       prefix: [33mtrue[39m },
                                                    right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                                    operator: [32m'==='[39m },
                                                 right: 
                                                  { type: [32m'BinaryExpression'[39m,
                                                    left: 
                                                     { type: [32m'UnaryExpression'[39m,
                                                       operator: [32m'typeof'[39m,
                                                       argument: { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                                       prefix: [33mtrue[39m },
                                                    right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                                    operator: [32m'==='[39m },
                                                 operator: [32m'||'[39m },
                                              right: 
                                               { type: [32m'BinaryExpression'[39m,
                                                 left: { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                                 right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                                 operator: [32m'=='[39m },
                                              operator: [32m'||'[39m },
                                           prefix: [33mtrue[39m },
                                        consequent: 
                                         { type: [32m'CallExpression'[39m,
                                           callee: { type: [32m'Identifier'[39m, name: [32m'invariant_1$1'[39m },
                                           arguments: 
                                            [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                              { type: [32m'Literal'[39m,
                                                value: [32m'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'[39m } ] },
                                        alternate: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'void'[39m,
                                           argument: { type: [32m'Literal'[39m, value: [33m0[39m },
                                           prefix: [33mtrue[39m } } },
                                   { type: [32m'ExpressionStatement'[39m,
                                     expression: 
                                      { type: [32m'CallExpression'[39m,
                                        callee: 
                                         { type: [32m'MemberExpression'[39m,
                                           object: 
                                            { type: [32m'MemberExpression'[39m,
                                              object: { type: [32m'ThisExpression'[39m },
                                              computed: [33mfalse[39m,
                                              property: { type: [32m'Identifier'[39m, name: [32m'updater'[39m } },
                                           computed: [33mfalse[39m,
                                           property: { type: [32m'Identifier'[39m, name: [32m'enqueueSetState'[39m } },
                                        arguments: 
                                         [ { type: [32m'ThisExpression'[39m },
                                           { type: [32m'Identifier'[39m, name: [32m'partialState'[39m },
                                           { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                           { type: [32m'Literal'[39m, value: [32m'setState'[39m } ] } } ] } },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: 
                              { type: [32m'MemberExpression'[39m,
                                object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                                computed: [33mfalse[39m,
                                property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'forceUpdate'[39m } },
                          right: 
                           { type: [32m'FunctionExpression'[39m,
                             id: [1mnull[22m,
                             async: [33mfalse[39m,
                             generator: [33mfalse[39m,
                             params: [ { type: [32m'Identifier'[39m, name: [32m'callback'[39m } ],
                             body: 
                              { type: [32m'BlockStatement'[39m,
                                body: 
                                 [ { type: [32m'ExpressionStatement'[39m,
                                     expression: 
                                      { type: [32m'CallExpression'[39m,
                                        callee: 
                                         { type: [32m'MemberExpression'[39m,
                                           object: 
                                            { type: [32m'MemberExpression'[39m,
                                              object: { type: [32m'ThisExpression'[39m },
                                              computed: [33mfalse[39m,
                                              property: { type: [32m'Identifier'[39m, name: [32m'updater'[39m } },
                                           computed: [33mfalse[39m,
                                           property: { type: [32m'Identifier'[39m, name: [32m'enqueueForceUpdate'[39m } },
                                        arguments: 
                                         [ { type: [32m'ThisExpression'[39m },
                                           { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                           { type: [32m'Literal'[39m, value: [32m'forceUpdate'[39m } ] } } ] } },
                          operator: [32m'='[39m } },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'deprecatedAPIs'[39m },
                                 init: 
                                  { type: [32m'ObjectExpression'[39m,
                                    properties: 
                                     [ { type: [32m'Property'[39m,
                                         shorthand: [33mfalse[39m,
                                         computed: [33mfalse[39m,
                                         kind: [32m'init'[39m,
                                         method: [33mfalse[39m,
                                         value: 
                                          { type: [32m'ArrayExpression'[39m,
                                            elements: 
                                             [ { type: [32m'Literal'[39m, value: [32m'isMounted'[39m },
                                               { type: [32m'BinaryExpression'[39m,
                                                 left: 
                                                  { type: [32m'Literal'[39m,
                                                    value: [32m'Instead, make sure to clean up subscriptions and pending requests in '[39m },
                                                 right: 
                                                  { type: [32m'Literal'[39m,
                                                    value: [32m'componentWillUnmount to prevent memory leaks.'[39m },
                                                 operator: [32m'+'[39m } ] },
                                         key: { type: [32m'Identifier'[39m, name: [32m'isMounted'[39m } },
                                       { type: [32m'Property'[39m,
                                         shorthand: [33mfalse[39m,
                                         computed: [33mfalse[39m,
                                         kind: [32m'init'[39m,
                                         method: [33mfalse[39m,
                                         value: 
                                          { type: [32m'ArrayExpression'[39m,
                                            elements: 
                                             [ { type: [32m'Literal'[39m, value: [32m'replaceState'[39m },
                                               { type: [32m'BinaryExpression'[39m,
                                                 left: 
                                                  { type: [32m'Literal'[39m,
                                                    value: [32m'Refactor your code to use setState instead (see '[39m },
                                                 right: 
                                                  { type: [32m'Literal'[39m,
                                                    value: [32m'https://github.com/facebook/react/issues/3236).'[39m },
                                                 operator: [32m'+'[39m } ] },
                                         key: { type: [32m'Identifier'[39m, name: [32m'replaceState'[39m } } ] } } ] },
                          { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'defineDeprecationWarning'[39m },
                                 init: 
                                  { type: [32m'FunctionExpression'[39m,
                                    id: [1mnull[22m,
                                    async: [33mfalse[39m,
                                    generator: [33mfalse[39m,
                                    params: 
                                     [ { type: [32m'Identifier'[39m, name: [32m'methodName'[39m },
                                       { type: [32m'Identifier'[39m, name: [32m'info'[39m } ],
                                    body: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                               arguments: 
                                                [ { type: [32m'MemberExpression'[39m,
                                                    object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                                                    computed: [33mfalse[39m,
                                                    property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                                                  { type: [32m'Identifier'[39m, name: [32m'methodName'[39m },
                                                  { type: [32m'ObjectExpression'[39m,
                                                    properties: 
                                                     [ { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: 
                                                          { type: [32m'FunctionExpression'[39m,
                                                            id: [1mnull[22m,
                                                            async: [33mfalse[39m,
                                                            generator: [33mfalse[39m,
                                                            params: [],
                                                            body: 
                                                             { type: [32m'BlockStatement'[39m,
                                                               body: 
                                                                [ { type: [32m'ExpressionStatement'[39m,
                                                                    expression: 
                                                                     { type: [32m'CallExpression'[39m,
                                                                       callee: { type: [32m'Identifier'[39m, name: [32m'lowPriorityWarning$1'[39m },
                                                                       arguments: 
                                                                        [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                                          { type: [32m'Literal'[39m,
                                                                            value: [32m'%s(...) is deprecated in plain JavaScript React classes. %s'[39m },
                                                                          { type: [32m'MemberExpression'[39m,
                                                                            object: { type: [32m'Identifier'[39m, name: [32m'info'[39m },
                                                                            computed: [33mtrue[39m,
                                                                            property: { type: [32m'Literal'[39m, value: [33m0[39m } },
                                                                          { type: [32m'MemberExpression'[39m,
                                                                            object: { type: [32m'Identifier'[39m, name: [32m'info'[39m },
                                                                            computed: [33mtrue[39m,
                                                                            property: { type: [32m'Literal'[39m, value: [33m1[39m } } ] } },
                                                                  { type: [32m'ReturnStatement'[39m,
                                                                    argument: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m } } ] } },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'get'[39m } } ] } ] } } ] } } } ] },
                          { type: [32m'ForInStatement'[39m,
                            left: 
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'fnName'[39m },
                                    init: [1mnull[22m } ] },
                            right: { type: [32m'Identifier'[39m, name: [32m'deprecatedAPIs'[39m },
                            body: 
                             { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'IfStatement'[39m,
                                    test: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'deprecatedAPIs'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } },
                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'fnName'[39m } ] },
                                    consequent: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: { type: [32m'Identifier'[39m, name: [32m'defineDeprecationWarning'[39m },
                                               arguments: 
                                                [ { type: [32m'Identifier'[39m, name: [32m'fnName'[39m },
                                                  { type: [32m'MemberExpression'[39m,
                                                    object: { type: [32m'Identifier'[39m, name: [32m'deprecatedAPIs'[39m },
                                                    computed: [33mtrue[39m,
                                                    property: { type: [32m'Identifier'[39m, name: [32m'fnName'[39m } } ] } } ] },
                                    alternate: [1mnull[22m } ] } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'PureComponent'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'updater'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'refs'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'emptyObject_1'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'updater'[39m } },
                                  right: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'updater'[39m },
                                     right: { type: [32m'Identifier'[39m, name: [32m'ReactNoopUpdateQueue'[39m },
                                     operator: [32m'||'[39m },
                                  operator: [32m'='[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'ComponentDummy'[39m },
                       params: [],
                       body: { type: [32m'BlockStatement'[39m, body: [] } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'ComponentDummy'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                          right: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                          operator: [32m'='[39m } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'pureComponentPrototype'[39m },
                            init: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'PureComponent'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                               right: 
                                { type: [32m'NewExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'ComponentDummy'[39m },
                                  arguments: [] },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'pureComponentPrototype'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m } },
                          right: { type: [32m'Identifier'[39m, name: [32m'PureComponent'[39m },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'CallExpression'[39m,
                          callee: { type: [32m'Identifier'[39m, name: [32m'objectAssign$1'[39m },
                          arguments: 
                           [ { type: [32m'Identifier'[39m, name: [32m'pureComponentPrototype'[39m },
                             { type: [32m'MemberExpression'[39m,
                               object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } } ] } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'pureComponentPrototype'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'isPureReactComponent'[39m } },
                          right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                          operator: [32m'='[39m } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'AsyncComponent'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'updater'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'refs'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'emptyObject_1'[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'ThisExpression'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'updater'[39m } },
                                  right: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'updater'[39m },
                                     right: { type: [32m'Identifier'[39m, name: [32m'ReactNoopUpdateQueue'[39m },
                                     operator: [32m'||'[39m },
                                  operator: [32m'='[39m } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'asyncComponentPrototype'[39m },
                            init: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'AsyncComponent'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                               right: 
                                { type: [32m'NewExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'ComponentDummy'[39m },
                                  arguments: [] },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'asyncComponentPrototype'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'constructor'[39m } },
                          right: { type: [32m'Identifier'[39m, name: [32m'AsyncComponent'[39m },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'CallExpression'[39m,
                          callee: { type: [32m'Identifier'[39m, name: [32m'objectAssign$1'[39m },
                          arguments: 
                           [ { type: [32m'Identifier'[39m, name: [32m'asyncComponentPrototype'[39m },
                             { type: [32m'MemberExpression'[39m,
                               object: { type: [32m'Identifier'[39m, name: [32m'Component'[39m },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } } ] } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'asyncComponentPrototype'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'unstable_isAsyncReactComponent'[39m } },
                          right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                          operator: [32m'='[39m } },
                     { type: [32m'ExpressionStatement'[39m,
                       expression: 
                        { type: [32m'AssignmentExpression'[39m,
                          left: 
                           { type: [32m'MemberExpression'[39m,
                             object: { type: [32m'Identifier'[39m, name: [32m'asyncComponentPrototype'[39m },
                             computed: [33mfalse[39m,
                             property: { type: [32m'Identifier'[39m, name: [32m'render'[39m } },
                          right: 
                           { type: [32m'FunctionExpression'[39m,
                             id: [1mnull[22m,
                             async: [33mfalse[39m,
                             generator: [33mfalse[39m,
                             params: [],
                             body: 
                              { type: [32m'BlockStatement'[39m,
                                body: 
                                 [ { type: [32m'ReturnStatement'[39m,
                                     argument: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: 
                                         { type: [32m'MemberExpression'[39m,
                                           object: { type: [32m'ThisExpression'[39m },
                                           computed: [33mfalse[39m,
                                           property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } },
                                        computed: [33mfalse[39m,
                                        property: { type: [32m'Identifier'[39m, name: [32m'children'[39m } } } ] } },
                          operator: [32m'='[39m } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactCurrentOwner'[39m },
                            init: 
                             { type: [32m'ObjectExpression'[39m,
                               properties: 
                                [ { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                    key: { type: [32m'Identifier'[39m, name: [32m'current'[39m } } ] } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty$1'[39m },
                            init: 
                             { type: [32m'MemberExpression'[39m,
                               object: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'prototype'[39m } },
                               computed: [33mfalse[39m,
                               property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE$1'[39m },
                            init: 
                             { type: [32m'LogicalExpression'[39m,
                               left: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'typeof'[39m,
                                           argument: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                           prefix: [33mtrue[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     operator: [32m'&&'[39m },
                                  right: 
                                   { type: [32m'CallExpression'[39m,
                                     callee: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     arguments: [ { type: [32m'Literal'[39m, value: [32m'react.element'[39m } ] },
                                  operator: [32m'&&'[39m },
                               right: { type: [32m'Literal'[39m, value: [33m60103[39m },
                               operator: [32m'||'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'RESERVED_PROPS'[39m },
                            init: 
                             { type: [32m'ObjectExpression'[39m,
                               properties: 
                                [ { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                    key: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                    key: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                    key: { type: [32m'Identifier'[39m, name: [32m'__self'[39m } },
                                  { type: [32m'Property'[39m,
                                    shorthand: [33mfalse[39m,
                                    computed: [33mfalse[39m,
                                    kind: [32m'init'[39m,
                                    method: [33mfalse[39m,
                                    value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                    key: { type: [32m'Identifier'[39m, name: [32m'__source'[39m } } ] } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'specialPropKeyWarningShown'[39m },
                            init: [1mnull[22m } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'specialPropRefWarningShown'[39m },
                            init: [1mnull[22m } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'hasValidRef'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'IfStatement'[39m,
                                    test: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty$1'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                       arguments: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                          { type: [32m'Literal'[39m, value: [32m'ref'[39m } ] },
                                    consequent: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                                 init: 
                                                  { type: [32m'MemberExpression'[39m,
                                                    object: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertyDescriptor'[39m } },
                                                       arguments: 
                                                        [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                          { type: [32m'Literal'[39m, value: [32m'ref'[39m } ] },
                                                    computed: [33mfalse[39m,
                                                    property: { type: [32m'Identifier'[39m, name: [32m'get'[39m } } } ] },
                                          { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'LogicalExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                               right: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'isReactWarning'[39m } },
                                               operator: [32m'&&'[39m },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ReturnStatement'[39m,
                                                    argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                            alternate: [1mnull[22m } ] },
                                    alternate: [1mnull[22m } ] },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                  operator: [32m'!=='[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'hasValidKey'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'IfStatement'[39m,
                                    test: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty$1'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                       arguments: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                          { type: [32m'Literal'[39m, value: [32m'key'[39m } ] },
                                    consequent: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'VariableDeclaration'[39m,
                                            kind: [32m'var'[39m,
                                            declarations: 
                                             [ { type: [32m'VariableDeclarator'[39m,
                                                 id: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                                 init: 
                                                  { type: [32m'MemberExpression'[39m,
                                                    object: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'getOwnPropertyDescriptor'[39m } },
                                                       arguments: 
                                                        [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                          { type: [32m'Literal'[39m, value: [32m'key'[39m } ] },
                                                    computed: [33mfalse[39m,
                                                    property: { type: [32m'Identifier'[39m, name: [32m'get'[39m } } } ] },
                                          { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'LogicalExpression'[39m,
                                               left: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                               right: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'getter'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'isReactWarning'[39m } },
                                               operator: [32m'&&'[39m },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ReturnStatement'[39m,
                                                    argument: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                                            alternate: [1mnull[22m } ] },
                                    alternate: [1mnull[22m } ] },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                  operator: [32m'!=='[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'defineKeyPropWarningGetter'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingKey'[39m },
                                    init: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: [],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'UnaryExpression'[39m,
                                                  operator: [32m'!'[39m,
                                                  argument: { type: [32m'Identifier'[39m, name: [32m'specialPropKeyWarningShown'[39m },
                                                  prefix: [33mtrue[39m },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'specialPropKeyWarningShown'[39m },
                                                          right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                                          operator: [32m'='[39m } },
                                                     { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'CallExpression'[39m,
                                                          callee: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m },
                                                          arguments: 
                                                           [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: 
                                                                { type: [32m'BinaryExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'%s: `key` is not a prop. Trying to access it will result '[39m },
                                                                     right: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'in `undefined` being returned. If you need to access the same '[39m },
                                                                     operator: [32m'+'[39m },
                                                                  right: 
                                                                   { type: [32m'Literal'[39m,
                                                                     value: [32m'value within the child component, you should pass it as a different '[39m },
                                                                  operator: [32m'+'[39m },
                                                               right: 
                                                                { type: [32m'Literal'[39m,
                                                                  value: [32m'prop. (https://fb.me/react-special-props)'[39m },
                                                               operator: [32m'+'[39m },
                                                             { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ] } } ] },
                                               alternate: [1mnull[22m } ] } } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingKey'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'isReactWarning'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                     { type: [32m'Literal'[39m, value: [32m'key'[39m },
                                     { type: [32m'ObjectExpression'[39m,
                                       properties: 
                                        [ { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingKey'[39m },
                                            key: { type: [32m'Identifier'[39m, name: [32m'get'[39m } },
                                          { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                            key: { type: [32m'Identifier'[39m, name: [32m'configurable'[39m } } ] } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'defineRefPropWarningGetter'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingRef'[39m },
                                    init: 
                                     { type: [32m'FunctionExpression'[39m,
                                       id: [1mnull[22m,
                                       async: [33mfalse[39m,
                                       generator: [33mfalse[39m,
                                       params: [],
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'UnaryExpression'[39m,
                                                  operator: [32m'!'[39m,
                                                  argument: { type: [32m'Identifier'[39m, name: [32m'specialPropRefWarningShown'[39m },
                                                  prefix: [33mtrue[39m },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'specialPropRefWarningShown'[39m },
                                                          right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                                          operator: [32m'='[39m } },
                                                     { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'CallExpression'[39m,
                                                          callee: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m },
                                                          arguments: 
                                                           [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: 
                                                                { type: [32m'BinaryExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'%s: `ref` is not a prop. Trying to access it will result '[39m },
                                                                     right: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'in `undefined` being returned. If you need to access the same '[39m },
                                                                     operator: [32m'+'[39m },
                                                                  right: 
                                                                   { type: [32m'Literal'[39m,
                                                                     value: [32m'value within the child component, you should pass it as a different '[39m },
                                                                  operator: [32m'+'[39m },
                                                               right: 
                                                                { type: [32m'Literal'[39m,
                                                                  value: [32m'prop. (https://fb.me/react-special-props)'[39m },
                                                               operator: [32m'+'[39m },
                                                             { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ] } } ] },
                                               alternate: [1mnull[22m } ] } } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingRef'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'isReactWarning'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                     { type: [32m'Literal'[39m, value: [32m'ref'[39m },
                                     { type: [32m'ObjectExpression'[39m,
                                       properties: 
                                        [ { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Identifier'[39m, name: [32m'warnAboutAccessingRef'[39m },
                                            key: { type: [32m'Identifier'[39m, name: [32m'get'[39m } },
                                          { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                            key: { type: [32m'Identifier'[39m, name: [32m'configurable'[39m } } ] } ] } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactElement'[39m },
                            init: 
                             { type: [32m'FunctionExpression'[39m,
                               id: [1mnull[22m,
                               async: [33mfalse[39m,
                               generator: [33mfalse[39m,
                               params: 
                                [ { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'owner'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'props'[39m } ],
                               body: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                            init: 
                                             { type: [32m'ObjectExpression'[39m,
                                               properties: 
                                                [ { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE$1'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                                  { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                                  { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                  { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                                  { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'props'[39m } },
                                                  { type: [32m'Property'[39m,
                                                    shorthand: [33mfalse[39m,
                                                    computed: [33mfalse[39m,
                                                    kind: [32m'init'[39m,
                                                    method: [33mfalse[39m,
                                                    value: { type: [32m'Identifier'[39m, name: [32m'owner'[39m },
                                                    key: { type: [32m'Identifier'[39m, name: [32m'_owner'[39m } } ] } } ] },
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'AssignmentExpression'[39m,
                                               left: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'_store'[39m } },
                                               right: { type: [32m'ObjectExpression'[39m, properties: [] },
                                               operator: [32m'='[39m } },
                                          { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                               arguments: 
                                                [ { type: [32m'MemberExpression'[39m,
                                                    object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                    computed: [33mfalse[39m,
                                                    property: { type: [32m'Identifier'[39m, name: [32m'_store'[39m } },
                                                  { type: [32m'Literal'[39m, value: [32m'validated'[39m },
                                                  { type: [32m'ObjectExpression'[39m,
                                                    properties: 
                                                     [ { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'configurable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'enumerable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'writable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'value'[39m } } ] } ] } },
                                          { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                               arguments: 
                                                [ { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                  { type: [32m'Literal'[39m, value: [32m'_self'[39m },
                                                  { type: [32m'ObjectExpression'[39m,
                                                    properties: 
                                                     [ { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'configurable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'enumerable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'writable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'value'[39m } } ] } ] } },
                                          { type: [32m'ExpressionStatement'[39m,
                                            expression: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'defineProperty'[39m } },
                                               arguments: 
                                                [ { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                  { type: [32m'Literal'[39m, value: [32m'_source'[39m },
                                                  { type: [32m'ObjectExpression'[39m,
                                                    properties: 
                                                     [ { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'configurable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'enumerable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'writable'[39m } },
                                                       { type: [32m'Property'[39m,
                                                         shorthand: [33mfalse[39m,
                                                         computed: [33mfalse[39m,
                                                         kind: [32m'init'[39m,
                                                         method: [33mfalse[39m,
                                                         value: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                                         key: { type: [32m'Identifier'[39m, name: [32m'value'[39m } } ] } ] } },
                                          { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'MemberExpression'[39m,
                                               object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                               computed: [33mfalse[39m,
                                               property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                                                       arguments: 
                                                        [ { type: [32m'MemberExpression'[39m,
                                                            object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                            computed: [33mfalse[39m,
                                                            property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } } ] } },
                                                  { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'element'[39m } ] } } ] },
                                            alternate: [1mnull[22m } ] },
                                     { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'element'[39m } } ] } } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'createElement'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'children'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'propName'[39m },
                                    init: [1mnull[22m } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                    init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                    init: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                    init: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                    init: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                    init: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'!='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'hasValidRef'[39m },
                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ] },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'hasValidKey'[39m },
                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ] },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                                  right: 
                                                   { type: [32m'BinaryExpression'[39m,
                                                     left: { type: [32m'Literal'[39m, value: [32m''[39m },
                                                     right: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                     operator: [32m'+'[39m },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                          right: 
                                           { type: [32m'ConditionalExpression'[39m,
                                             test: 
                                              { type: [32m'BinaryExpression'[39m,
                                                left: 
                                                 { type: [32m'MemberExpression'[39m,
                                                   object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                   computed: [33mfalse[39m,
                                                   property: { type: [32m'Identifier'[39m, name: [32m'__self'[39m } },
                                                right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                operator: [32m'==='[39m },
                                             consequent: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                             alternate: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'__self'[39m } } },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                          right: 
                                           { type: [32m'ConditionalExpression'[39m,
                                             test: 
                                              { type: [32m'BinaryExpression'[39m,
                                                left: 
                                                 { type: [32m'MemberExpression'[39m,
                                                   object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                   computed: [33mfalse[39m,
                                                   property: { type: [32m'Identifier'[39m, name: [32m'__source'[39m } },
                                                right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                operator: [32m'==='[39m },
                                             consequent: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                             alternate: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'__source'[39m } } },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ForInStatement'[39m,
                                       left: { type: [32m'Identifier'[39m, name: [32m'propName'[39m },
                                       right: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'LogicalExpression'[39m,
                                                  left: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty$1'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                        { type: [32m'Identifier'[39m, name: [32m'propName'[39m } ] },
                                                  right: 
                                                   { type: [32m'UnaryExpression'[39m,
                                                     operator: [32m'!'[39m,
                                                     argument: 
                                                      { type: [32m'CallExpression'[39m,
                                                        callee: 
                                                         { type: [32m'MemberExpression'[39m,
                                                           object: { type: [32m'Identifier'[39m, name: [32m'RESERVED_PROPS'[39m },
                                                           computed: [33mfalse[39m,
                                                           property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } },
                                                        arguments: [ { type: [32m'Identifier'[39m, name: [32m'propName'[39m } ] },
                                                     prefix: [33mtrue[39m },
                                                  operator: [32m'&&'[39m },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                          right: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                          operator: [32m'='[39m } } ] },
                                               alternate: [1mnull[22m } ] } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                    init: 
                                     { type: [32m'BinaryExpression'[39m,
                                       left: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                       right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                       operator: [32m'-'[39m } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                  right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                  operator: [32m'==='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'children'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                          operator: [32m'='[39m } } ] },
                               alternate: 
                                { type: [32m'IfStatement'[39m,
                                  test: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                     right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                     operator: [32m'>'[39m },
                                  consequent: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                               init: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m } ] } } ] },
                                        { type: [32m'ForStatement'[39m,
                                          init: 
                                           { type: [32m'VariableDeclaration'[39m,
                                             kind: [32m'var'[39m,
                                             declarations: 
                                              [ { type: [32m'VariableDeclarator'[39m,
                                                  id: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                  init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                             operator: [32m'<'[39m },
                                          update: 
                                           { type: [32m'UpdateExpression'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                             operator: [32m'++'[39m,
                                             prefix: [33mfalse[39m },
                                          body: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'AssignmentExpression'[39m,
                                                     left: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                                        computed: [33mtrue[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } },
                                                     right: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                        computed: [33mtrue[39m,
                                                        property: 
                                                         { type: [32m'BinaryExpression'[39m,
                                                           left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                           right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                           operator: [32m'+'[39m } },
                                                     operator: [32m'='[39m } } ] } },
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'CallExpression'[39m,
                                                          callee: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'freeze'[39m } },
                                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'childArray'[39m } ] } } ] },
                                               alternate: [1mnull[22m } ] },
                                        { type: [32m'ExpressionStatement'[39m,
                                          expression: 
                                           { type: [32m'AssignmentExpression'[39m,
                                             left: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'children'[39m } },
                                             right: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                             operator: [32m'='[39m } } ] },
                                  alternate: [1mnull[22m } },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                  right: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m } },
                                  operator: [32m'&&'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                            init: 
                                             { type: [32m'MemberExpression'[39m,
                                               object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                               computed: [33mfalse[39m,
                                               property: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m } } } ] },
                                     { type: [32m'ForInStatement'[39m,
                                       left: { type: [32m'Identifier'[39m, name: [32m'propName'[39m },
                                       right: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'BinaryExpression'[39m,
                                                  left: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                     computed: [33mtrue[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                  right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                  operator: [32m'==='[39m },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                          right: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                                             computed: [33mtrue[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                          operator: [32m'='[39m } } ] },
                                               alternate: [1mnull[22m } ] } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'IfStatement'[39m,
                                    test: 
                                     { type: [32m'LogicalExpression'[39m,
                                       left: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                       right: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                       operator: [32m'||'[39m },
                                    consequent: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'LogicalExpression'[39m,
                                               left: 
                                                { type: [32m'BinaryExpression'[39m,
                                                  left: 
                                                   { type: [32m'UnaryExpression'[39m,
                                                     operator: [32m'typeof'[39m,
                                                     argument: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                                     prefix: [33mtrue[39m },
                                                  right: { type: [32m'Literal'[39m, value: [32m'undefined'[39m },
                                                  operator: [32m'==='[39m },
                                               right: 
                                                { type: [32m'BinaryExpression'[39m,
                                                  left: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                                  right: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE$1'[39m },
                                                  operator: [32m'!=='[39m },
                                               operator: [32m'||'[39m },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'VariableDeclaration'[39m,
                                                    kind: [32m'var'[39m,
                                                    declarations: 
                                                     [ { type: [32m'VariableDeclarator'[39m,
                                                         id: { type: [32m'Identifier'[39m, name: [32m'displayName'[39m },
                                                         init: 
                                                          { type: [32m'ConditionalExpression'[39m,
                                                            test: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: 
                                                                { type: [32m'UnaryExpression'[39m,
                                                                  operator: [32m'typeof'[39m,
                                                                  argument: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                                                  prefix: [33mtrue[39m },
                                                               right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                                               operator: [32m'==='[39m },
                                                            consequent: 
                                                             { type: [32m'LogicalExpression'[39m,
                                                               left: 
                                                                { type: [32m'LogicalExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                                                     computed: [33mfalse[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } },
                                                                  right: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                                                     computed: [33mfalse[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'name'[39m } },
                                                                  operator: [32m'||'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [32m'Unknown'[39m },
                                                               operator: [32m'||'[39m },
                                                            alternate: { type: [32m'Identifier'[39m, name: [32m'type'[39m } } } ] },
                                                  { type: [32m'IfStatement'[39m,
                                                    test: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                                    consequent: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'CallExpression'[39m,
                                                               callee: { type: [32m'Identifier'[39m, name: [32m'defineKeyPropWarningGetter'[39m },
                                                               arguments: 
                                                                [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                                  { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ] } } ] },
                                                    alternate: [1mnull[22m },
                                                  { type: [32m'IfStatement'[39m,
                                                    test: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                                    consequent: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'CallExpression'[39m,
                                                               callee: { type: [32m'Identifier'[39m, name: [32m'defineRefPropWarningGetter'[39m },
                                                               arguments: 
                                                                [ { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                                  { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } ] } } ] },
                                                    alternate: [1mnull[22m } ] },
                                            alternate: [1mnull[22m } ] },
                                    alternate: [1mnull[22m } ] },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'ReactElement'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'ReactCurrentOwner'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'current'[39m } },
                                     { type: [32m'Identifier'[39m, name: [32m'props'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'cloneAndReplaceKey'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'newKey'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'newElement'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: { type: [32m'Identifier'[39m, name: [32m'ReactElement'[39m },
                                       arguments: 
                                        [ { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                          { type: [32m'Identifier'[39m, name: [32m'newKey'[39m },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'_self'[39m } },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'_source'[39m } },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'_owner'[39m } },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'oldElement'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } } ] } } ] },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Identifier'[39m, name: [32m'newElement'[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'cloneElement'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'children'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'propName'[39m },
                                    init: [1mnull[22m } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: { type: [32m'Identifier'[39m, name: [32m'objectAssign$1'[39m },
                                       arguments: 
                                        [ { type: [32m'ObjectExpression'[39m, properties: [] },
                                          { type: [32m'MemberExpression'[39m,
                                            object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                            computed: [33mfalse[39m,
                                            property: { type: [32m'Identifier'[39m, name: [32m'props'[39m } } ] } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'_self'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'_source'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'owner'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'_owner'[39m } } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'!='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'hasValidRef'[39m },
                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ] },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'ref'[39m } },
                                                  operator: [32m'='[39m } },
                                             { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'owner'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'ReactCurrentOwner'[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'current'[39m } },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'hasValidKey'[39m },
                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'config'[39m } ] },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                                  right: 
                                                   { type: [32m'BinaryExpression'[39m,
                                                     left: { type: [32m'Literal'[39m, value: [32m''[39m },
                                                     right: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                     operator: [32m'+'[39m },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                            init: [1mnull[22m } ] },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'LogicalExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                          right: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m } },
                                          operator: [32m'&&'[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m } },
                                                  operator: [32m'='[39m } } ] },
                                       alternate: [1mnull[22m },
                                     { type: [32m'ForInStatement'[39m,
                                       left: { type: [32m'Identifier'[39m, name: [32m'propName'[39m },
                                       right: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'IfStatement'[39m,
                                               test: 
                                                { type: [32m'LogicalExpression'[39m,
                                                  left: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty$1'[39m },
                                                        computed: [33mfalse[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                        { type: [32m'Identifier'[39m, name: [32m'propName'[39m } ] },
                                                  right: 
                                                   { type: [32m'UnaryExpression'[39m,
                                                     operator: [32m'!'[39m,
                                                     argument: 
                                                      { type: [32m'CallExpression'[39m,
                                                        callee: 
                                                         { type: [32m'MemberExpression'[39m,
                                                           object: { type: [32m'Identifier'[39m, name: [32m'RESERVED_PROPS'[39m },
                                                           computed: [33mfalse[39m,
                                                           property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } },
                                                        arguments: [ { type: [32m'Identifier'[39m, name: [32m'propName'[39m } ] },
                                                     prefix: [33mtrue[39m },
                                                  operator: [32m'&&'[39m },
                                               consequent: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'IfStatement'[39m,
                                                       test: 
                                                        { type: [32m'LogicalExpression'[39m,
                                                          left: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                                computed: [33mtrue[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                             right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                             operator: [32m'==='[39m },
                                                          right: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                                             right: { type: [32m'Identifier'[39m, name: [32m'undefined'[39m },
                                                             operator: [32m'!=='[39m },
                                                          operator: [32m'&&'[39m },
                                                       consequent: 
                                                        { type: [32m'BlockStatement'[39m,
                                                          body: 
                                                           [ { type: [32m'ExpressionStatement'[39m,
                                                               expression: 
                                                                { type: [32m'AssignmentExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                                     computed: [33mtrue[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                                  right: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'defaultProps'[39m },
                                                                     computed: [33mtrue[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                                  operator: [32m'='[39m } } ] },
                                                       alternate: 
                                                        { type: [32m'BlockStatement'[39m,
                                                          body: 
                                                           [ { type: [32m'ExpressionStatement'[39m,
                                                               expression: 
                                                                { type: [32m'AssignmentExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                                     computed: [33mtrue[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                                  right: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'config'[39m },
                                                                     computed: [33mtrue[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'propName'[39m } },
                                                                  operator: [32m'='[39m } } ] } } ] },
                                               alternate: [1mnull[22m } ] } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                    init: 
                                     { type: [32m'BinaryExpression'[39m,
                                       left: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                       right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                       operator: [32m'-'[39m } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                  right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                  operator: [32m'==='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'children'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                          operator: [32m'='[39m } } ] },
                               alternate: 
                                { type: [32m'IfStatement'[39m,
                                  test: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                     right: { type: [32m'Literal'[39m, value: [33m1[39m },
                                     operator: [32m'>'[39m },
                                  consequent: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                               init: 
                                                { type: [32m'CallExpression'[39m,
                                                  callee: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m } ] } } ] },
                                        { type: [32m'ForStatement'[39m,
                                          init: 
                                           { type: [32m'VariableDeclaration'[39m,
                                             kind: [32m'var'[39m,
                                             declarations: 
                                              [ { type: [32m'VariableDeclarator'[39m,
                                                  id: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                  init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'childrenLength'[39m },
                                             operator: [32m'<'[39m },
                                          update: 
                                           { type: [32m'UpdateExpression'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                             operator: [32m'++'[39m,
                                             prefix: [33mfalse[39m },
                                          body: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'AssignmentExpression'[39m,
                                                     left: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                                        computed: [33mtrue[39m,
                                                        property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } },
                                                     right: 
                                                      { type: [32m'MemberExpression'[39m,
                                                        object: { type: [32m'Identifier'[39m, name: [32m'arguments'[39m },
                                                        computed: [33mtrue[39m,
                                                        property: 
                                                         { type: [32m'BinaryExpression'[39m,
                                                           left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                                           right: { type: [32m'Literal'[39m, value: [33m2[39m },
                                                           operator: [32m'+'[39m } },
                                                     operator: [32m'='[39m } } ] } },
                                        { type: [32m'ExpressionStatement'[39m,
                                          expression: 
                                           { type: [32m'AssignmentExpression'[39m,
                                             left: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'props'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'children'[39m } },
                                             right: { type: [32m'Identifier'[39m, name: [32m'childArray'[39m },
                                             operator: [32m'='[39m } } ] },
                                  alternate: [1mnull[22m } },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'ReactElement'[39m },
                                  arguments: 
                                   [ { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'element'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } },
                                     { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'ref'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'self'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'owner'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'props'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'isValidElement'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'object'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'typeof'[39m,
                                           argument: { type: [32m'Identifier'[39m, name: [32m'object'[39m },
                                           prefix: [33mtrue[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: { type: [32m'Identifier'[39m, name: [32m'object'[39m },
                                        right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                        operator: [32m'!=='[39m },
                                     operator: [32m'&&'[39m },
                                  right: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'object'[39m },
                                        computed: [33mfalse[39m,
                                        property: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                     right: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE$1'[39m },
                                     operator: [32m'==='[39m },
                                  operator: [32m'&&'[39m } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                            init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'getCurrentStack'[39m } },
                               right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                               operator: [32m'='[39m } },
                          { type: [32m'ExpressionStatement'[39m,
                            expression: 
                             { type: [32m'AssignmentExpression'[39m,
                               left: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'getStackAddendum'[39m } },
                               right: 
                                { type: [32m'FunctionExpression'[39m,
                                  id: [1mnull[22m,
                                  async: [33mfalse[39m,
                                  generator: [33mfalse[39m,
                                  params: [],
                                  body: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'impl'[39m },
                                               init: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'getCurrentStack'[39m } } } ] },
                                        { type: [32m'IfStatement'[39m,
                                          test: { type: [32m'Identifier'[39m, name: [32m'impl'[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ReturnStatement'[39m,
                                                  argument: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'impl'[39m },
                                                     arguments: [] } } ] },
                                          alternate: [1mnull[22m },
                                        { type: [32m'ReturnStatement'[39m,
                                          argument: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] } },
                               operator: [32m'='[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ITERATOR_SYMBOL'[39m },
                            init: 
                             { type: [32m'LogicalExpression'[39m,
                               left: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'UnaryExpression'[39m,
                                     operator: [32m'typeof'[39m,
                                     argument: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                     prefix: [33mtrue[39m },
                                  right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                  operator: [32m'==='[39m },
                               right: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'iterator'[39m } },
                               operator: [32m'&&'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'FAUX_ITERATOR_SYMBOL'[39m },
                            init: { type: [32m'Literal'[39m, value: [32m'@@iterator'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE'[39m },
                            init: 
                             { type: [32m'LogicalExpression'[39m,
                               left: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'typeof'[39m,
                                           argument: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                           prefix: [33mtrue[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     operator: [32m'&&'[39m },
                                  right: 
                                   { type: [32m'CallExpression'[39m,
                                     callee: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     arguments: [ { type: [32m'Literal'[39m, value: [32m'react.element'[39m } ] },
                                  operator: [32m'&&'[39m },
                               right: { type: [32m'Literal'[39m, value: [33m60103[39m },
                               operator: [32m'||'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'REACT_PORTAL_TYPE'[39m },
                            init: 
                             { type: [32m'LogicalExpression'[39m,
                               left: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'typeof'[39m,
                                           argument: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                           prefix: [33mtrue[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     operator: [32m'&&'[39m },
                                  right: 
                                   { type: [32m'CallExpression'[39m,
                                     callee: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'Symbol'[39m },
                                        computed: [33mtrue[39m,
                                        property: { type: [32m'Literal'[39m, value: [32m'for'[39m } },
                                     arguments: [ { type: [32m'Literal'[39m, value: [32m'react.portal'[39m } ] },
                                  operator: [32m'&&'[39m },
                               right: { type: [32m'Literal'[39m, value: [33m60106[39m },
                               operator: [32m'||'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'SEPARATOR'[39m },
                            init: { type: [32m'Literal'[39m, value: [32m'.'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'SUBSEPARATOR'[39m },
                            init: { type: [32m'Literal'[39m, value: [32m':'[39m } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'escape'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'key'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'escapeRegex'[39m },
                                    init: 
                                     { type: [32m'Literal'[39m,
                                       value: [31m/[=:]/g[39m,
                                       regex: { pattern: [32m'[=:]'[39m, flags: [32m'g'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'escaperLookup'[39m },
                                    init: 
                                     { type: [32m'ObjectExpression'[39m,
                                       properties: 
                                        [ { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Literal'[39m, value: [32m'=0'[39m },
                                            key: { type: [32m'Literal'[39m, value: [32m'='[39m } },
                                          { type: [32m'Property'[39m,
                                            shorthand: [33mfalse[39m,
                                            computed: [33mfalse[39m,
                                            kind: [32m'init'[39m,
                                            method: [33mfalse[39m,
                                            value: { type: [32m'Literal'[39m, value: [32m'=2'[39m },
                                            key: { type: [32m'Literal'[39m, value: [32m':'[39m } } ] } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'escapedString'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Literal'[39m, value: [32m''[39m },
                                             right: { type: [32m'Identifier'[39m, name: [32m'key'[39m },
                                             operator: [32m'+'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                       arguments: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'escapeRegex'[39m },
                                          { type: [32m'FunctionExpression'[39m,
                                            id: [1mnull[22m,
                                            async: [33mfalse[39m,
                                            generator: [33mfalse[39m,
                                            params: [ { type: [32m'Identifier'[39m, name: [32m'match'[39m } ],
                                            body: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'ReturnStatement'[39m,
                                                    argument: 
                                                     { type: [32m'MemberExpression'[39m,
                                                       object: { type: [32m'Identifier'[39m, name: [32m'escaperLookup'[39m },
                                                       computed: [33mtrue[39m,
                                                       property: { type: [32m'Identifier'[39m, name: [32m'match'[39m } } } ] } } ] } } ] },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Literal'[39m, value: [32m'$'[39m },
                                  right: { type: [32m'Identifier'[39m, name: [32m'escapedString'[39m },
                                  operator: [32m'+'[39m } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'didWarnAboutMaps'[39m },
                            init: { type: [32m'Literal'[39m, value: [33mfalse[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'userProvidedKeyEscapeRegex'[39m },
                            init: 
                             { type: [32m'Literal'[39m,
                               value: [31m/\/+/g[39m,
                               regex: { pattern: [32m'\\/+'[39m, flags: [32m'g'[39m } } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'escapeUserProvidedKey'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'text'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: { type: [32m'Literal'[39m, value: [32m''[39m },
                                        right: { type: [32m'Identifier'[39m, name: [32m'text'[39m },
                                        operator: [32m'+'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'userProvidedKeyEscapeRegex'[39m },
                                     { type: [32m'Literal'[39m, value: [32m'$&/'[39m } ] } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'POOL_SIZE'[39m },
                            init: { type: [32m'Literal'[39m, value: [33m10[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'traverseContextPool'[39m },
                            init: { type: [32m'ArrayExpression'[39m, elements: [] } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'getPooledTraverseContext'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'mapResult'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'mapFunction'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'mapContext'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'MemberExpression'[39m,
                                  object: { type: [32m'Identifier'[39m, name: [32m'traverseContextPool'[39m },
                                  computed: [33mfalse[39m,
                                  property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                            init: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'traverseContextPool'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'pop'[39m } },
                                               arguments: [] } } ] },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'result'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'mapResult'[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'func'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'mapFunction'[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                          right: { type: [32m'Identifier'[39m, name: [32m'mapContext'[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'count'[39m } },
                                          right: { type: [32m'Literal'[39m, value: [33m0[39m },
                                          operator: [32m'='[39m } },
                                     { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } } ] },
                               alternate: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: 
                                        { type: [32m'ObjectExpression'[39m,
                                          properties: 
                                           [ { type: [32m'Property'[39m,
                                               shorthand: [33mfalse[39m,
                                               computed: [33mfalse[39m,
                                               kind: [32m'init'[39m,
                                               method: [33mfalse[39m,
                                               value: { type: [32m'Identifier'[39m, name: [32m'mapResult'[39m },
                                               key: { type: [32m'Identifier'[39m, name: [32m'result'[39m } },
                                             { type: [32m'Property'[39m,
                                               shorthand: [33mfalse[39m,
                                               computed: [33mfalse[39m,
                                               kind: [32m'init'[39m,
                                               method: [33mfalse[39m,
                                               value: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m },
                                               key: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m } },
                                             { type: [32m'Property'[39m,
                                               shorthand: [33mfalse[39m,
                                               computed: [33mfalse[39m,
                                               kind: [32m'init'[39m,
                                               method: [33mfalse[39m,
                                               value: { type: [32m'Identifier'[39m, name: [32m'mapFunction'[39m },
                                               key: { type: [32m'Identifier'[39m, name: [32m'func'[39m } },
                                             { type: [32m'Property'[39m,
                                               shorthand: [33mfalse[39m,
                                               computed: [33mfalse[39m,
                                               kind: [32m'init'[39m,
                                               method: [33mfalse[39m,
                                               value: { type: [32m'Identifier'[39m, name: [32m'mapContext'[39m },
                                               key: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                             { type: [32m'Property'[39m,
                                               shorthand: [33mfalse[39m,
                                               computed: [33mfalse[39m,
                                               kind: [32m'init'[39m,
                                               method: [33mfalse[39m,
                                               value: { type: [32m'Literal'[39m, value: [33m0[39m },
                                               key: { type: [32m'Identifier'[39m, name: [32m'count'[39m } } ] } } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'releaseTraverseContext'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'result'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'func'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'='[39m } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'AssignmentExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'count'[39m } },
                                  right: { type: [32m'Literal'[39m, value: [33m0[39m },
                                  operator: [32m'='[39m } },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'traverseContextPool'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                  right: { type: [32m'Identifier'[39m, name: [32m'POOL_SIZE'[39m },
                                  operator: [32m'<'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'traverseContextPool'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'push'[39m } },
                                          arguments: [ { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } } ] },
                               alternate: [1mnull[22m } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildrenImpl'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'nameSoFar'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                    init: 
                                     { type: [32m'UnaryExpression'[39m,
                                       operator: [32m'typeof'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                       prefix: [33mtrue[39m } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     right: { type: [32m'Literal'[39m, value: [32m'undefined'[39m },
                                     operator: [32m'==='[39m },
                                  right: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     right: { type: [32m'Literal'[39m, value: [32m'boolean'[39m },
                                     operator: [32m'==='[39m },
                                  operator: [32m'||'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                          right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                          operator: [32m'='[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'LogicalExpression'[39m,
                                        left: 
                                         { type: [32m'LogicalExpression'[39m,
                                           left: 
                                            { type: [32m'BinaryExpression'[39m,
                                              left: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                              right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                              operator: [32m'==='[39m },
                                           right: 
                                            { type: [32m'BinaryExpression'[39m,
                                              left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                              right: { type: [32m'Literal'[39m, value: [32m'string'[39m },
                                              operator: [32m'==='[39m },
                                           operator: [32m'||'[39m },
                                        right: 
                                         { type: [32m'BinaryExpression'[39m,
                                           left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                           right: { type: [32m'Literal'[39m, value: [32m'number'[39m },
                                           operator: [32m'==='[39m },
                                        operator: [32m'||'[39m },
                                     right: 
                                      { type: [32m'LogicalExpression'[39m,
                                        left: 
                                         { type: [32m'BinaryExpression'[39m,
                                           left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                           right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                           operator: [32m'==='[39m },
                                        right: 
                                         { type: [32m'BinaryExpression'[39m,
                                           left: 
                                            { type: [32m'MemberExpression'[39m,
                                              object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                              computed: [33mfalse[39m,
                                              property: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                           right: { type: [32m'Identifier'[39m, name: [32m'REACT_ELEMENT_TYPE'[39m },
                                           operator: [32m'==='[39m },
                                        operator: [32m'&&'[39m },
                                     operator: [32m'||'[39m },
                                  right: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'MemberExpression'[39m,
                                           object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                           computed: [33mfalse[39m,
                                           property: { type: [32m'Identifier'[39m, name: [32m'$$typeof'[39m } },
                                        right: { type: [32m'Identifier'[39m, name: [32m'REACT_PORTAL_TYPE'[39m },
                                        operator: [32m'==='[39m },
                                     operator: [32m'&&'[39m },
                                  operator: [32m'||'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                          arguments: 
                                           [ { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                             { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                             { type: [32m'ConditionalExpression'[39m,
                                               test: 
                                                { type: [32m'BinaryExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'nameSoFar'[39m },
                                                  right: { type: [32m'Literal'[39m, value: [32m''[39m },
                                                  operator: [32m'==='[39m },
                                               consequent: 
                                                { type: [32m'BinaryExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'SEPARATOR'[39m },
                                                  right: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'getComponentKey'[39m },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                        { type: [32m'Literal'[39m, value: [33m0[39m } ] },
                                                  operator: [32m'+'[39m },
                                               alternate: { type: [32m'Identifier'[39m, name: [32m'nameSoFar'[39m } } ] } },
                                     { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Literal'[39m, value: [33m1[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                    init: [1mnull[22m } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'nextName'[39m },
                                    init: [1mnull[22m } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'subtreeCount'[39m },
                                    init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'nextNamePrefix'[39m },
                                    init: 
                                     { type: [32m'ConditionalExpression'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'nameSoFar'[39m },
                                          right: { type: [32m'Literal'[39m, value: [32m''[39m },
                                          operator: [32m'==='[39m },
                                       consequent: { type: [32m'Identifier'[39m, name: [32m'SEPARATOR'[39m },
                                       alternate: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'nameSoFar'[39m },
                                          right: { type: [32m'Identifier'[39m, name: [32m'SUBSEPARATOR'[39m },
                                          operator: [32m'+'[39m } } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'isArray'[39m } },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ] },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ForStatement'[39m,
                                       init: 
                                        { type: [32m'VariableDeclaration'[39m,
                                          kind: [32m'var'[39m,
                                          declarations: 
                                           [ { type: [32m'VariableDeclarator'[39m,
                                               id: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                               init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                          right: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'length'[39m } },
                                          operator: [32m'<'[39m },
                                       update: 
                                        { type: [32m'UpdateExpression'[39m,
                                          argument: { type: [32m'Identifier'[39m, name: [32m'i'[39m },
                                          operator: [32m'++'[39m,
                                          prefix: [33mfalse[39m },
                                       body: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                     computed: [33mtrue[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'i'[39m } },
                                                  operator: [32m'='[39m } },
                                             { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'nextName'[39m },
                                                  right: 
                                                   { type: [32m'BinaryExpression'[39m,
                                                     left: { type: [32m'Identifier'[39m, name: [32m'nextNamePrefix'[39m },
                                                     right: 
                                                      { type: [32m'CallExpression'[39m,
                                                        callee: { type: [32m'Identifier'[39m, name: [32m'getComponentKey'[39m },
                                                        arguments: 
                                                         [ { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                           { type: [32m'Identifier'[39m, name: [32m'i'[39m } ] },
                                                     operator: [32m'+'[39m },
                                                  operator: [32m'='[39m } },
                                             { type: [32m'ExpressionStatement'[39m,
                                               expression: 
                                                { type: [32m'AssignmentExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'subtreeCount'[39m },
                                                  right: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildrenImpl'[39m },
                                                     arguments: 
                                                      [ { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                        { type: [32m'Identifier'[39m, name: [32m'nextName'[39m },
                                                        { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                                        { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] },
                                                  operator: [32m'+='[39m } } ] } } ] },
                               alternate: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'iteratorFn'[39m },
                                            init: 
                                             { type: [32m'LogicalExpression'[39m,
                                               left: 
                                                { type: [32m'LogicalExpression'[39m,
                                                  left: { type: [32m'Identifier'[39m, name: [32m'ITERATOR_SYMBOL'[39m },
                                                  right: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                     computed: [33mtrue[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'ITERATOR_SYMBOL'[39m } },
                                                  operator: [32m'&&'[39m },
                                               right: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                  computed: [33mtrue[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'FAUX_ITERATOR_SYMBOL'[39m } },
                                               operator: [32m'||'[39m } } ] },
                                     { type: [32m'IfStatement'[39m,
                                       test: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: 
                                           { type: [32m'UnaryExpression'[39m,
                                             operator: [32m'typeof'[39m,
                                             argument: { type: [32m'Identifier'[39m, name: [32m'iteratorFn'[39m },
                                             prefix: [33mtrue[39m },
                                          right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                          operator: [32m'==='[39m },
                                       consequent: 
                                        { type: [32m'BlockStatement'[39m,
                                          body: 
                                           [ { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'IfStatement'[39m,
                                                    test: 
                                                     { type: [32m'BinaryExpression'[39m,
                                                       left: { type: [32m'Identifier'[39m, name: [32m'iteratorFn'[39m },
                                                       right: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'entries'[39m } },
                                                       operator: [32m'==='[39m },
                                                    consequent: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'CallExpression'[39m,
                                                               callee: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m },
                                                               arguments: 
                                                                [ { type: [32m'Identifier'[39m, name: [32m'didWarnAboutMaps'[39m },
                                                                  { type: [32m'BinaryExpression'[39m,
                                                                    left: 
                                                                     { type: [32m'BinaryExpression'[39m,
                                                                       left: 
                                                                        { type: [32m'Literal'[39m,
                                                                          value: [32m'Using Maps as children is unsupported and will likely yield '[39m },
                                                                       right: 
                                                                        { type: [32m'Literal'[39m,
                                                                          value: [32m'unexpected results. Convert it to a sequence/iterable of keyed '[39m },
                                                                       operator: [32m'+'[39m },
                                                                    right: { type: [32m'Literal'[39m, value: [32m'ReactElements instead.%s'[39m },
                                                                    operator: [32m'+'[39m },
                                                                  { type: [32m'CallExpression'[39m,
                                                                    callee: 
                                                                     { type: [32m'MemberExpression'[39m,
                                                                       object: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                                                                       computed: [33mfalse[39m,
                                                                       property: { type: [32m'Identifier'[39m, name: [32m'getStackAddendum'[39m } },
                                                                    arguments: [] } ] } },
                                                          { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'AssignmentExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'didWarnAboutMaps'[39m },
                                                               right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                                               operator: [32m'='[39m } } ] },
                                                    alternate: [1mnull[22m } ] },
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'iterator'[39m },
                                                    init: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: 
                                                        { type: [32m'MemberExpression'[39m,
                                                          object: { type: [32m'Identifier'[39m, name: [32m'iteratorFn'[39m },
                                                          computed: [33mfalse[39m,
                                                          property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                                       arguments: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ] } } ] },
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'step'[39m },
                                                    init: [1mnull[22m } ] },
                                             { type: [32m'VariableDeclaration'[39m,
                                               kind: [32m'var'[39m,
                                               declarations: 
                                                [ { type: [32m'VariableDeclarator'[39m,
                                                    id: { type: [32m'Identifier'[39m, name: [32m'ii'[39m },
                                                    init: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                                             { type: [32m'WhileStatement'[39m,
                                               test: 
                                                { type: [32m'UnaryExpression'[39m,
                                                  operator: [32m'!'[39m,
                                                  argument: 
                                                   { type: [32m'MemberExpression'[39m,
                                                     object: 
                                                      { type: [32m'AssignmentExpression'[39m,
                                                        left: { type: [32m'Identifier'[39m, name: [32m'step'[39m },
                                                        right: 
                                                         { type: [32m'CallExpression'[39m,
                                                           callee: 
                                                            { type: [32m'MemberExpression'[39m,
                                                              object: { type: [32m'Identifier'[39m, name: [32m'iterator'[39m },
                                                              computed: [33mfalse[39m,
                                                              property: { type: [32m'Identifier'[39m, name: [32m'next'[39m } },
                                                           arguments: [] },
                                                        operator: [32m'='[39m },
                                                     computed: [33mfalse[39m,
                                                     property: { type: [32m'Identifier'[39m, name: [32m'done'[39m } },
                                                  prefix: [33mtrue[39m },
                                               body: 
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                          right: 
                                                           { type: [32m'MemberExpression'[39m,
                                                             object: { type: [32m'Identifier'[39m, name: [32m'step'[39m },
                                                             computed: [33mfalse[39m,
                                                             property: { type: [32m'Identifier'[39m, name: [32m'value'[39m } },
                                                          operator: [32m'='[39m } },
                                                     { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'nextName'[39m },
                                                          right: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'nextNamePrefix'[39m },
                                                             right: 
                                                              { type: [32m'CallExpression'[39m,
                                                                callee: { type: [32m'Identifier'[39m, name: [32m'getComponentKey'[39m },
                                                                arguments: 
                                                                 [ { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                                   { type: [32m'UpdateExpression'[39m,
                                                                     argument: { type: [32m'Identifier'[39m, name: [32m'ii'[39m },
                                                                     operator: [32m'++'[39m,
                                                                     prefix: [33mfalse[39m } ] },
                                                             operator: [32m'+'[39m },
                                                          operator: [32m'='[39m } },
                                                     { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'subtreeCount'[39m },
                                                          right: 
                                                           { type: [32m'CallExpression'[39m,
                                                             callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildrenImpl'[39m },
                                                             arguments: 
                                                              [ { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                                { type: [32m'Identifier'[39m, name: [32m'nextName'[39m },
                                                                { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                                                { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] },
                                                          operator: [32m'+='[39m } } ] } } ] },
                                       alternate: 
                                        { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                             right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                             operator: [32m'==='[39m },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'VariableDeclaration'[39m,
                                                  kind: [32m'var'[39m,
                                                  declarations: 
                                                   [ { type: [32m'VariableDeclarator'[39m,
                                                       id: { type: [32m'Identifier'[39m, name: [32m'addendum'[39m },
                                                       init: { type: [32m'Literal'[39m, value: [32m''[39m } } ] },
                                                { type: [32m'BlockStatement'[39m,
                                                  body: 
                                                   [ { type: [32m'ExpressionStatement'[39m,
                                                       expression: 
                                                        { type: [32m'AssignmentExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'addendum'[39m },
                                                          right: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: 
                                                              { type: [32m'BinaryExpression'[39m,
                                                                left: 
                                                                 { type: [32m'Literal'[39m,
                                                                   value: [32m' If you meant to render a collection of children, use an array '[39m },
                                                                right: { type: [32m'Literal'[39m, value: [32m'instead.'[39m },
                                                                operator: [32m'+'[39m },
                                                             right: 
                                                              { type: [32m'CallExpression'[39m,
                                                                callee: 
                                                                 { type: [32m'MemberExpression'[39m,
                                                                   object: { type: [32m'Identifier'[39m, name: [32m'ReactDebugCurrentFrame'[39m },
                                                                   computed: [33mfalse[39m,
                                                                   property: { type: [32m'Identifier'[39m, name: [32m'getStackAddendum'[39m } },
                                                                arguments: [] },
                                                             operator: [32m'+'[39m },
                                                          operator: [32m'='[39m } } ] },
                                                { type: [32m'VariableDeclaration'[39m,
                                                  kind: [32m'var'[39m,
                                                  declarations: 
                                                   [ { type: [32m'VariableDeclarator'[39m,
                                                       id: { type: [32m'Identifier'[39m, name: [32m'childrenString'[39m },
                                                       init: 
                                                        { type: [32m'BinaryExpression'[39m,
                                                          left: { type: [32m'Literal'[39m, value: [32m''[39m },
                                                          right: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                                          operator: [32m'+'[39m } } ] },
                                                { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'CallExpression'[39m,
                                                     callee: { type: [32m'Identifier'[39m, name: [32m'invariant_1$1'[39m },
                                                     arguments: 
                                                      [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                        { type: [32m'Literal'[39m,
                                                          value: [32m'Objects are not valid as a React child (found: %s).%s'[39m },
                                                        { type: [32m'ConditionalExpression'[39m,
                                                          test: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: { type: [32m'Identifier'[39m, name: [32m'childrenString'[39m },
                                                             right: { type: [32m'Literal'[39m, value: [32m'[object Object]'[39m },
                                                             operator: [32m'==='[39m },
                                                          consequent: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: 
                                                              { type: [32m'BinaryExpression'[39m,
                                                                left: { type: [32m'Literal'[39m, value: [32m'object with keys {'[39m },
                                                                right: 
                                                                 { type: [32m'CallExpression'[39m,
                                                                   callee: 
                                                                    { type: [32m'MemberExpression'[39m,
                                                                      object: 
                                                                       { type: [32m'CallExpression'[39m,
                                                                         callee: 
                                                                          { type: [32m'MemberExpression'[39m,
                                                                            object: { type: [32m'Identifier'[39m, name: [32m'Object'[39m },
                                                                            computed: [33mfalse[39m,
                                                                            property: { type: [32m'Identifier'[39m, name: [32m'keys'[39m } },
                                                                         arguments: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ] },
                                                                      computed: [33mfalse[39m,
                                                                      property: { type: [32m'Identifier'[39m, name: [32m'join'[39m } },
                                                                   arguments: [ { type: [32m'Literal'[39m, value: [32m', '[39m } ] },
                                                                operator: [32m'+'[39m },
                                                             right: { type: [32m'Literal'[39m, value: [32m'}'[39m },
                                                             operator: [32m'+'[39m },
                                                          alternate: { type: [32m'Identifier'[39m, name: [32m'childrenString'[39m } },
                                                        { type: [32m'Identifier'[39m, name: [32m'addendum'[39m } ] } } ] },
                                          alternate: [1mnull[22m } } ] } },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Identifier'[39m, name: [32m'subtreeCount'[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildren'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'=='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Literal'[39m, value: [33m0[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildrenImpl'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'Literal'[39m, value: [32m''[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'callback'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'getComponentKey'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'component'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'index'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'LogicalExpression'[39m,
                                  left: 
                                   { type: [32m'LogicalExpression'[39m,
                                     left: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: 
                                         { type: [32m'UnaryExpression'[39m,
                                           operator: [32m'typeof'[39m,
                                           argument: { type: [32m'Identifier'[39m, name: [32m'component'[39m },
                                           prefix: [33mtrue[39m },
                                        right: { type: [32m'Literal'[39m, value: [32m'object'[39m },
                                        operator: [32m'==='[39m },
                                     right: 
                                      { type: [32m'BinaryExpression'[39m,
                                        left: { type: [32m'Identifier'[39m, name: [32m'component'[39m },
                                        right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                        operator: [32m'!=='[39m },
                                     operator: [32m'&&'[39m },
                                  right: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: 
                                      { type: [32m'MemberExpression'[39m,
                                        object: { type: [32m'Identifier'[39m, name: [32m'component'[39m },
                                        computed: [33mfalse[39m,
                                        property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                     right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                     operator: [32m'!='[39m },
                                  operator: [32m'&&'[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'escape'[39m },
                                          arguments: 
                                           [ { type: [32m'MemberExpression'[39m,
                                               object: { type: [32m'Identifier'[39m, name: [32m'component'[39m },
                                               computed: [33mfalse[39m,
                                               property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } } ] } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'index'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'toString'[39m } },
                                  arguments: [ { type: [32m'Literal'[39m, value: [33m36[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'forEachSingleChild'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'name'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'func'[39m } } },
                                  { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                     { type: [32m'UpdateExpression'[39m,
                                       argument: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'count'[39m } },
                                       operator: [32m'++'[39m,
                                       prefix: [33mfalse[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'forEachChildren'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'forEachFunc'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'forEachContext'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'=='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'children'[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: { type: [32m'Identifier'[39m, name: [32m'getPooledTraverseContext'[39m },
                                       arguments: 
                                        [ { type: [32m'Literal'[39m, value: [1mnull[22m },
                                          { type: [32m'Literal'[39m, value: [1mnull[22m },
                                          { type: [32m'Identifier'[39m, name: [32m'forEachFunc'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'forEachContext'[39m } ] } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildren'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'forEachSingleChild'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'releaseTraverseContext'[39m },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'mapSingleChildIntoContext'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'childKey'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'result'[39m } } },
                                  { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m } } },
                                  { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'func'[39m } } },
                                  { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'context'[39m } } } ] },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: 
                                        { type: [32m'MemberExpression'[39m,
                                          object: { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                          computed: [33mfalse[39m,
                                          property: { type: [32m'Identifier'[39m, name: [32m'call'[39m } },
                                       arguments: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'context'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                          { type: [32m'UpdateExpression'[39m,
                                            argument: 
                                             { type: [32m'MemberExpression'[39m,
                                               object: { type: [32m'Identifier'[39m, name: [32m'bookKeeping'[39m },
                                               computed: [33mfalse[39m,
                                               property: { type: [32m'Identifier'[39m, name: [32m'count'[39m } },
                                            operator: [32m'++'[39m,
                                            prefix: [33mfalse[39m } ] } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'CallExpression'[39m,
                                  callee: 
                                   { type: [32m'MemberExpression'[39m,
                                     object: { type: [32m'Identifier'[39m, name: [32m'Array'[39m },
                                     computed: [33mfalse[39m,
                                     property: { type: [32m'Identifier'[39m, name: [32m'isArray'[39m } },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m } ] },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'CallExpression'[39m,
                                          callee: { type: [32m'Identifier'[39m, name: [32m'mapIntoWithKeyPrefixInternal'[39m },
                                          arguments: 
                                           [ { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                             { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                             { type: [32m'Identifier'[39m, name: [32m'childKey'[39m },
                                             { type: [32m'MemberExpression'[39m,
                                               object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction_1'[39m },
                                               computed: [33mfalse[39m,
                                               property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsArgument'[39m } } ] } } ] },
                               alternate: 
                                { type: [32m'IfStatement'[39m,
                                  test: 
                                   { type: [32m'BinaryExpression'[39m,
                                     left: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                     right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                     operator: [32m'!='[39m },
                                  consequent: 
                                   { type: [32m'BlockStatement'[39m,
                                     body: 
                                      [ { type: [32m'IfStatement'[39m,
                                          test: 
                                           { type: [32m'CallExpression'[39m,
                                             callee: { type: [32m'Identifier'[39m, name: [32m'isValidElement'[39m },
                                             arguments: [ { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m } ] },
                                          consequent: 
                                           { type: [32m'BlockStatement'[39m,
                                             body: 
                                              [ { type: [32m'ExpressionStatement'[39m,
                                                  expression: 
                                                   { type: [32m'AssignmentExpression'[39m,
                                                     left: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                                     right: 
                                                      { type: [32m'CallExpression'[39m,
                                                        callee: { type: [32m'Identifier'[39m, name: [32m'cloneAndReplaceKey'[39m },
                                                        arguments: 
                                                         [ { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: 
                                                              { type: [32m'BinaryExpression'[39m,
                                                                left: { type: [32m'Identifier'[39m, name: [32m'keyPrefix'[39m },
                                                                right: 
                                                                 { type: [32m'ConditionalExpression'[39m,
                                                                   test: 
                                                                    { type: [32m'LogicalExpression'[39m,
                                                                      left: 
                                                                       { type: [32m'MemberExpression'[39m,
                                                                         object: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                                                         computed: [33mfalse[39m,
                                                                         property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                                      right: 
                                                                       { type: [32m'LogicalExpression'[39m,
                                                                         left: 
                                                                          { type: [32m'UnaryExpression'[39m,
                                                                            operator: [32m'!'[39m,
                                                                            argument: { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                                            prefix: [33mtrue[39m },
                                                                         right: 
                                                                          { type: [32m'BinaryExpression'[39m,
                                                                            left: 
                                                                             { type: [32m'MemberExpression'[39m,
                                                                               object: { type: [32m'Identifier'[39m, name: [32m'child'[39m },
                                                                               computed: [33mfalse[39m,
                                                                               property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                                            right: 
                                                                             { type: [32m'MemberExpression'[39m,
                                                                               object: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                                                               computed: [33mfalse[39m,
                                                                               property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } },
                                                                            operator: [32m'!=='[39m },
                                                                         operator: [32m'||'[39m },
                                                                      operator: [32m'&&'[39m },
                                                                   consequent: 
                                                                    { type: [32m'BinaryExpression'[39m,
                                                                      left: 
                                                                       { type: [32m'CallExpression'[39m,
                                                                         callee: { type: [32m'Identifier'[39m, name: [32m'escapeUserProvidedKey'[39m },
                                                                         arguments: 
                                                                          [ { type: [32m'MemberExpression'[39m,
                                                                              object: { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m },
                                                                              computed: [33mfalse[39m,
                                                                              property: { type: [32m'Identifier'[39m, name: [32m'key'[39m } } ] },
                                                                      right: { type: [32m'Literal'[39m, value: [32m'/'[39m },
                                                                      operator: [32m'+'[39m },
                                                                   alternate: { type: [32m'Literal'[39m, value: [32m''[39m } },
                                                                operator: [32m'+'[39m },
                                                             right: { type: [32m'Identifier'[39m, name: [32m'childKey'[39m },
                                                             operator: [32m'+'[39m } ] },
                                                     operator: [32m'='[39m } } ] },
                                          alternate: [1mnull[22m },
                                        { type: [32m'ExpressionStatement'[39m,
                                          expression: 
                                           { type: [32m'CallExpression'[39m,
                                             callee: 
                                              { type: [32m'MemberExpression'[39m,
                                                object: { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                                computed: [33mfalse[39m,
                                                property: { type: [32m'Identifier'[39m, name: [32m'push'[39m } },
                                             arguments: [ { type: [32m'Identifier'[39m, name: [32m'mappedChild'[39m } ] } } ] },
                                  alternate: [1mnull[22m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'mapIntoWithKeyPrefixInternal'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'array'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'prefix'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'escapedPrefix'[39m },
                                    init: { type: [32m'Literal'[39m, value: [32m''[39m } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'prefix'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'!='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ExpressionStatement'[39m,
                                       expression: 
                                        { type: [32m'AssignmentExpression'[39m,
                                          left: { type: [32m'Identifier'[39m, name: [32m'escapedPrefix'[39m },
                                          right: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: 
                                              { type: [32m'CallExpression'[39m,
                                                callee: { type: [32m'Identifier'[39m, name: [32m'escapeUserProvidedKey'[39m },
                                                arguments: [ { type: [32m'Identifier'[39m, name: [32m'prefix'[39m } ] },
                                             right: { type: [32m'Literal'[39m, value: [32m'/'[39m },
                                             operator: [32m'+'[39m },
                                          operator: [32m'='[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m },
                                    init: 
                                     { type: [32m'CallExpression'[39m,
                                       callee: { type: [32m'Identifier'[39m, name: [32m'getPooledTraverseContext'[39m },
                                       arguments: 
                                        [ { type: [32m'Identifier'[39m, name: [32m'array'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'escapedPrefix'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                          { type: [32m'Identifier'[39m, name: [32m'context'[39m } ] } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildren'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'mapSingleChildIntoContext'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'releaseTraverseContext'[39m },
                                  arguments: [ { type: [32m'Identifier'[39m, name: [32m'traverseContext'[39m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'mapChildren'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                  right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                  operator: [32m'=='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'children'[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                    init: { type: [32m'ArrayExpression'[39m, elements: [] } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'mapIntoWithKeyPrefixInternal'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                     { type: [32m'Literal'[39m, value: [1mnull[22m },
                                     { type: [32m'Identifier'[39m, name: [32m'func'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'context'[39m } ] } },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Identifier'[39m, name: [32m'result'[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'countChildren'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'context'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ReturnStatement'[39m,
                               argument: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'traverseAllChildren'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction_1'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsNull'[39m } },
                                     { type: [32m'Literal'[39m, value: [1mnull[22m } ] } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'toArray'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                    init: { type: [32m'ArrayExpression'[39m, elements: [] } } ] },
                             { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'CallExpression'[39m,
                                  callee: { type: [32m'Identifier'[39m, name: [32m'mapIntoWithKeyPrefixInternal'[39m },
                                  arguments: 
                                   [ { type: [32m'Identifier'[39m, name: [32m'children'[39m },
                                     { type: [32m'Identifier'[39m, name: [32m'result'[39m },
                                     { type: [32m'Literal'[39m, value: [1mnull[22m },
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'emptyFunction_1'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'thatReturnsArgument'[39m } } ] } },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Identifier'[39m, name: [32m'result'[39m } } ] } },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'onlyChild'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'ExpressionStatement'[39m,
                               expression: 
                                { type: [32m'ConditionalExpression'[39m,
                                  test: 
                                   { type: [32m'UnaryExpression'[39m,
                                     operator: [32m'!'[39m,
                                     argument: 
                                      { type: [32m'CallExpression'[39m,
                                        callee: { type: [32m'Identifier'[39m, name: [32m'isValidElement'[39m },
                                        arguments: [ { type: [32m'Identifier'[39m, name: [32m'children'[39m } ] },
                                     prefix: [33mtrue[39m },
                                  consequent: 
                                   { type: [32m'CallExpression'[39m,
                                     callee: { type: [32m'Identifier'[39m, name: [32m'invariant_1$1'[39m },
                                     arguments: 
                                      [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                        { type: [32m'Literal'[39m,
                                          value: [32m'React.Children.only expected to receive a single React element child.'[39m } ] },
                                  alternate: 
                                   { type: [32m'UnaryExpression'[39m,
                                     operator: [32m'void'[39m,
                                     argument: { type: [32m'Literal'[39m, value: [33m0[39m },
                                     prefix: [33mtrue[39m } } },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Identifier'[39m, name: [32m'children'[39m } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'describeComponentFrame'[39m },
                            init: 
                             { type: [32m'FunctionExpression'[39m,
                               id: [1mnull[22m,
                               async: [33mfalse[39m,
                               generator: [33mfalse[39m,
                               params: 
                                [ { type: [32m'Identifier'[39m, name: [32m'name'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                  { type: [32m'Identifier'[39m, name: [32m'ownerName'[39m } ],
                               body: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: 
                                        { type: [32m'BinaryExpression'[39m,
                                          left: 
                                           { type: [32m'BinaryExpression'[39m,
                                             left: { type: [32m'Literal'[39m, value: [32m'\\n    in '[39m },
                                             right: 
                                              { type: [32m'LogicalExpression'[39m,
                                                left: { type: [32m'Identifier'[39m, name: [32m'name'[39m },
                                                right: { type: [32m'Literal'[39m, value: [32m'Unknown'[39m },
                                                operator: [32m'||'[39m },
                                             operator: [32m'+'[39m },
                                          right: 
                                           { type: [32m'ConditionalExpression'[39m,
                                             test: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                             consequent: 
                                              { type: [32m'BinaryExpression'[39m,
                                                left: 
                                                 { type: [32m'BinaryExpression'[39m,
                                                   left: 
                                                    { type: [32m'BinaryExpression'[39m,
                                                      left: 
                                                       { type: [32m'BinaryExpression'[39m,
                                                         left: { type: [32m'Literal'[39m, value: [32m' (at '[39m },
                                                         right: 
                                                          { type: [32m'CallExpression'[39m,
                                                            callee: 
                                                             { type: [32m'MemberExpression'[39m,
                                                               object: 
                                                                { type: [32m'MemberExpression'[39m,
                                                                  object: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                                                  computed: [33mfalse[39m,
                                                                  property: { type: [32m'Identifier'[39m, name: [32m'fileName'[39m } },
                                                               computed: [33mfalse[39m,
                                                               property: { type: [32m'Identifier'[39m, name: [32m'replace'[39m } },
                                                            arguments: 
                                                             [ { type: [32m'Literal'[39m,
                                                                 value: [31m/^.*[\\\/]/[39m,
                                                                 regex: { pattern: [32m'^.*[\\\\\\/]'[39m, flags: [32m''[39m } },
                                                               { type: [32m'Literal'[39m, value: [32m''[39m } ] },
                                                         operator: [32m'+'[39m },
                                                      right: { type: [32m'Literal'[39m, value: [32m':'[39m },
                                                      operator: [32m'+'[39m },
                                                   right: 
                                                    { type: [32m'MemberExpression'[39m,
                                                      object: { type: [32m'Identifier'[39m, name: [32m'source'[39m },
                                                      computed: [33mfalse[39m,
                                                      property: { type: [32m'Identifier'[39m, name: [32m'lineNumber'[39m } },
                                                   operator: [32m'+'[39m },
                                                right: { type: [32m'Literal'[39m, value: [32m')'[39m },
                                                operator: [32m'+'[39m },
                                             alternate: 
                                              { type: [32m'ConditionalExpression'[39m,
                                                test: { type: [32m'Identifier'[39m, name: [32m'ownerName'[39m },
                                                consequent: 
                                                 { type: [32m'BinaryExpression'[39m,
                                                   left: 
                                                    { type: [32m'BinaryExpression'[39m,
                                                      left: { type: [32m'Literal'[39m, value: [32m' (created by '[39m },
                                                      right: { type: [32m'Identifier'[39m, name: [32m'ownerName'[39m },
                                                      operator: [32m'+'[39m },
                                                   right: { type: [32m'Literal'[39m, value: [32m')'[39m },
                                                   operator: [32m'+'[39m },
                                                alternate: { type: [32m'Literal'[39m, value: [32m''[39m } } },
                                          operator: [32m'+'[39m } } ] } } } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'getComponentName'[39m },
                       params: [ { type: [32m'Identifier'[39m, name: [32m'fiber'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'VariableDeclaration'[39m,
                               kind: [32m'var'[39m,
                               declarations: 
                                [ { type: [32m'VariableDeclarator'[39m,
                                    id: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                    init: 
                                     { type: [32m'MemberExpression'[39m,
                                       object: { type: [32m'Identifier'[39m, name: [32m'fiber'[39m },
                                       computed: [33mfalse[39m,
                                       property: { type: [32m'Identifier'[39m, name: [32m'type'[39m } } } ] },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'UnaryExpression'[39m,
                                     operator: [32m'typeof'[39m,
                                     argument: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     prefix: [33mtrue[39m },
                                  right: { type: [32m'Literal'[39m, value: [32m'string'[39m },
                                  operator: [32m'==='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: { type: [32m'Identifier'[39m, name: [32m'type'[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'IfStatement'[39m,
                               test: 
                                { type: [32m'BinaryExpression'[39m,
                                  left: 
                                   { type: [32m'UnaryExpression'[39m,
                                     operator: [32m'typeof'[39m,
                                     argument: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                     prefix: [33mtrue[39m },
                                  right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                  operator: [32m'==='[39m },
                               consequent: 
                                { type: [32m'BlockStatement'[39m,
                                  body: 
                                   [ { type: [32m'ReturnStatement'[39m,
                                       argument: 
                                        { type: [32m'LogicalExpression'[39m,
                                          left: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'displayName'[39m } },
                                          right: 
                                           { type: [32m'MemberExpression'[39m,
                                             object: { type: [32m'Identifier'[39m, name: [32m'type'[39m },
                                             computed: [33mfalse[39m,
                                             property: { type: [32m'Identifier'[39m, name: [32m'name'[39m } },
                                          operator: [32m'||'[39m } } ] },
                               alternate: [1mnull[22m },
                             { type: [32m'ReturnStatement'[39m,
                               argument: { type: [32m'Literal'[39m, value: [1mnull[22m } } ] } },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret$1'[39m },
                            init: 
                             { type: [32m'Literal'[39m,
                               value: [32m'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'[39m } } ] },
                     { type: [32m'VariableDeclaration'[39m,
                       kind: [32m'var'[39m,
                       declarations: 
                        [ { type: [32m'VariableDeclarator'[39m,
                            id: { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret_1'[39m },
                            init: { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret$1'[39m } } ] },
                     { type: [32m'BlockStatement'[39m,
                       body: 
                        [ { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'invariant$2'[39m },
                                 init: { type: [32m'Identifier'[39m, name: [32m'invariant_1$1'[39m } } ] },
                          { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'warning$2'[39m },
                                 init: { type: [32m'Identifier'[39m, name: [32m'warning_1$1'[39m } } ] },
                          { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret'[39m },
                                 init: { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret_1'[39m } } ] },
                          { type: [32m'VariableDeclaration'[39m,
                            kind: [32m'var'[39m,
                            declarations: 
                             [ { type: [32m'VariableDeclarator'[39m,
                                 id: { type: [32m'Identifier'[39m, name: [32m'loggedTypeFailures'[39m },
                                 init: { type: [32m'ObjectExpression'[39m, properties: [] } } ] } ] },
                     { type: [32m'FunctionDeclaration'[39m,
                       async: [33mfalse[39m,
                       generator: [33mfalse[39m,
                       id: { type: [32m'Identifier'[39m, name: [32m'checkPropTypes'[39m },
                       params: 
                        [ { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'values'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'location'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                          { type: [32m'Identifier'[39m, name: [32m'getStack'[39m } ],
                       body: 
                        { type: [32m'BlockStatement'[39m,
                          body: 
                           [ { type: [32m'BlockStatement'[39m,
                               body: 
                                [ { type: [32m'ForInStatement'[39m,
                                    left: 
                                     { type: [32m'VariableDeclaration'[39m,
                                       kind: [32m'var'[39m,
                                       declarations: 
                                        [ { type: [32m'VariableDeclarator'[39m,
                                            id: { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m },
                                            init: [1mnull[22m } ] },
                                    right: { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                                    body: 
                                     { type: [32m'BlockStatement'[39m,
                                       body: 
                                        [ { type: [32m'IfStatement'[39m,
                                            test: 
                                             { type: [32m'CallExpression'[39m,
                                               callee: 
                                                { type: [32m'MemberExpression'[39m,
                                                  object: { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                                                  computed: [33mfalse[39m,
                                                  property: { type: [32m'Identifier'[39m, name: [32m'hasOwnProperty'[39m } },
                                               arguments: [ { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m } ] },
                                            consequent: 
                                             { type: [32m'BlockStatement'[39m,
                                               body: 
                                                [ { type: [32m'VariableDeclaration'[39m,
                                                    kind: [32m'var'[39m,
                                                    declarations: 
                                                     [ { type: [32m'VariableDeclarator'[39m,
                                                         id: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                         init: [1mnull[22m } ] },
                                                  { type: [32m'TryStatement'[39m,
                                                    block: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'CallExpression'[39m,
                                                               callee: { type: [32m'Identifier'[39m, name: [32m'invariant$2'[39m },
                                                               arguments: 
                                                                [ { type: [32m'BinaryExpression'[39m,
                                                                    left: 
                                                                     { type: [32m'UnaryExpression'[39m,
                                                                       operator: [32m'typeof'[39m,
                                                                       argument: 
                                                                        { type: [32m'MemberExpression'[39m,
                                                                          object: { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                                                                          computed: [33mtrue[39m,
                                                                          property: { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m } },
                                                                       prefix: [33mtrue[39m },
                                                                    right: { type: [32m'Literal'[39m, value: [32m'function'[39m },
                                                                    operator: [32m'==='[39m },
                                                                  { type: [32m'BinaryExpression'[39m,
                                                                    left: 
                                                                     { type: [32m'Literal'[39m,
                                                                       value: [32m'%s: %s type `%s` is invalid; it must be a function, usually from '[39m },
                                                                    right: 
                                                                     { type: [32m'Literal'[39m,
                                                                       value: [32m'the `prop-types` package, but received `%s`.'[39m },
                                                                    operator: [32m'+'[39m },
                                                                  { type: [32m'LogicalExpression'[39m,
                                                                    left: { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                                                                    right: { type: [32m'Literal'[39m, value: [32m'React class'[39m },
                                                                    operator: [32m'||'[39m },
                                                                  { type: [32m'Identifier'[39m, name: [32m'location'[39m },
                                                                  { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m },
                                                                  { type: [32m'UnaryExpression'[39m,
                                                                    operator: [32m'typeof'[39m,
                                                                    argument: 
                                                                     { type: [32m'MemberExpression'[39m,
                                                                       object: { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                                                                       computed: [33mtrue[39m,
                                                                       property: { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m } },
                                                                    prefix: [33mtrue[39m } ] } },
                                                          { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'AssignmentExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                               right: 
                                                                { type: [32m'CallExpression'[39m,
                                                                  callee: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'typeSpecs'[39m },
                                                                     computed: [33mtrue[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m } },
                                                                  arguments: 
                                                                   [ { type: [32m'Identifier'[39m, name: [32m'values'[39m },
                                                                     { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m },
                                                                     { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                                                                     { type: [32m'Identifier'[39m, name: [32m'location'[39m },
                                                                     { type: [32m'Literal'[39m, value: [1mnull[22m },
                                                                     { type: [32m'Identifier'[39m, name: [32m'ReactPropTypesSecret'[39m } ] },
                                                               operator: [32m'='[39m } } ] },
                                                    handler: 
                                                     { type: [32m'CatchClause'[39m,
                                                       param: { type: [32m'Identifier'[39m, name: [32m'ex'[39m },
                                                       body: 
                                                        { type: [32m'BlockStatement'[39m,
                                                          body: 
                                                           [ { type: [32m'ExpressionStatement'[39m,
                                                               expression: 
                                                                { type: [32m'AssignmentExpression'[39m,
                                                                  left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                                  right: { type: [32m'Identifier'[39m, name: [32m'ex'[39m },
                                                                  operator: [32m'='[39m } } ] } },
                                                    finalizer: [1mnull[22m },
                                                  { type: [32m'ExpressionStatement'[39m,
                                                    expression: 
                                                     { type: [32m'CallExpression'[39m,
                                                       callee: { type: [32m'Identifier'[39m, name: [32m'warning$2'[39m },
                                                       arguments: 
                                                        [ { type: [32m'LogicalExpression'[39m,
                                                            left: 
                                                             { type: [32m'UnaryExpression'[39m,
                                                               operator: [32m'!'[39m,
                                                               argument: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                               prefix: [33mtrue[39m },
                                                            right: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                               right: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                               operator: [32m'instanceof'[39m },
                                                            operator: [32m'||'[39m },
                                                          { type: [32m'BinaryExpression'[39m,
                                                            left: 
                                                             { type: [32m'BinaryExpression'[39m,
                                                               left: 
                                                                { type: [32m'BinaryExpression'[39m,
                                                                  left: 
                                                                   { type: [32m'BinaryExpression'[39m,
                                                                     left: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'%s: type specification of %s `%s` is invalid; the type checker '[39m },
                                                                     right: 
                                                                      { type: [32m'Literal'[39m,
                                                                        value: [32m'function must return `null` or an `Error` but returned a %s. '[39m },
                                                                     operator: [32m'+'[39m },
                                                                  right: 
                                                                   { type: [32m'Literal'[39m,
                                                                     value: [32m'You may have forgotten to pass an argument to the type checker '[39m },
                                                                  operator: [32m'+'[39m },
                                                               right: 
                                                                { type: [32m'Literal'[39m,
                                                                  value: [32m'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and '[39m },
                                                               operator: [32m'+'[39m },
                                                            right: { type: [32m'Literal'[39m, value: [32m'shape all require an argument).'[39m },
                                                            operator: [32m'+'[39m },
                                                          { type: [32m'LogicalExpression'[39m,
                                                            left: { type: [32m'Identifier'[39m, name: [32m'componentName'[39m },
                                                            right: { type: [32m'Literal'[39m, value: [32m'React class'[39m },
                                                            operator: [32m'||'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'location'[39m },
                                                          { type: [32m'Identifier'[39m, name: [32m'typeSpecName'[39m },
                                                          { type: [32m'UnaryExpression'[39m,
                                                            operator: [32m'typeof'[39m,
                                                            argument: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                            prefix: [33mtrue[39m } ] } },
                                                  { type: [32m'IfStatement'[39m,
                                                    test: 
                                                     { type: [32m'LogicalExpression'[39m,
                                                       left: 
                                                        { type: [32m'BinaryExpression'[39m,
                                                          left: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                          right: { type: [32m'Identifier'[39m, name: [32m'Error'[39m },
                                                          operator: [32m'instanceof'[39m },
                                                       right: 
                                                        { type: [32m'UnaryExpression'[39m,
                                                          operator: [32m'!'[39m,
                                                          argument: 
                                                           { type: [32m'BinaryExpression'[39m,
                                                             left: 
                                                              { type: [32m'MemberExpression'[39m,
                                                                object: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                                computed: [33mfalse[39m,
                                                                property: { type: [32m'Identifier'[39m, name: [32m'message'[39m } },
                                                             right: { type: [32m'Identifier'[39m, name: [32m'loggedTypeFailures'[39m },
                                                             operator: [32m'in'[39m },
                                                          prefix: [33mtrue[39m },
                                                       operator: [32m'&&'[39m },
                                                    consequent: 
                                                     { type: [32m'BlockStatement'[39m,
                                                       body: 
                                                        [ { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'AssignmentExpression'[39m,
                                                               left: 
                                                                { type: [32m'MemberExpression'[39m,
                                                                  object: { type: [32m'Identifier'[39m, name: [32m'loggedTypeFailures'[39m },
                                                                  computed: [33mtrue[39m,
                                                                  property: 
                                                                   { type: [32m'MemberExpression'[39m,
                                                                     object: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                                     computed: [33mfalse[39m,
                                                                     property: { type: [32m'Identifier'[39m, name: [32m'message'[39m } } },
                                                               right: { type: [32m'Literal'[39m, value: [33mtrue[39m },
                                                               operator: [32m'='[39m } },
                                                          { type: [32m'VariableDeclaration'[39m,
                                                            kind: [32m'var'[39m,
                                                            declarations: 
                                                             [ { type: [32m'VariableDeclarator'[39m,
                                                                 id: { type: [32m'Identifier'[39m, name: [32m'stack'[39m },
                                                                 init: 
                                                                  { type: [32m'ConditionalExpression'[39m,
                                                                    test: { type: [32m'Identifier'[39m, name: [32m'getStack'[39m },
                                                                    consequent: 
                                                                     { type: [32m'CallExpression'[39m,
                                                                       callee: { type: [32m'Identifier'[39m, name: [32m'getStack'[39m },
                                                                       arguments: [] },
                                                                    alternate: { type: [32m'Literal'[39m, value: [32m''[39m } } } ] },
                                                          { type: [32m'ExpressionStatement'[39m,
                                                            expression: 
                                                             { type: [32m'CallExpression'[39m,
                                                               callee: { type: [32m'Identifier'[39m, name: [32m'warning$2'[39m },
                                                               arguments: 
                                                                [ { type: [32m'Literal'[39m, value: [33mfalse[39m },
                                                                  { type: [32m'Literal'[39m, value: [32m'Failed %s type: %s%s'[39m },
                                                                  { type: [32m'Identifier'[39m, name: [32m'location'[39m },
                                                                  { type: [32m'MemberExpression'[39m,
                                                                    object: { type: [32m'Identifier'[39m, name: [32m'error'[39m },
                                                                    computed: [33mfalse[39m,
                                                                    property: { type: [32m'Identifier'[39m, name: [32m'message'[39m } },
                                                                  { type: [32m'ConditionalExpression'[39m,
                                                                    test: 
                                                                     { type: [32m'BinaryExpression'[39m,
                                                                       left: { type: [32m'Identifier'[39m, name: [32m'stack'[39m },
                                                                       right: { type: [32m'Literal'[39m, value: [1mnull[22m },
                                                                       operator: [32m'!='[39m },
                                                                    consequent: { type: [32m'Identifier'[39m, name: [32m'stack'[39m },
                                                                    alternate: { type: [32m'Literal'[39m, value: [32m''[39m } } ] } } ] },
                                                    alternate: [1mnull[22m } ] },
                                            alternate: [1mnull[22m } ] } } ] } ] } },
                     ... 23 more items ] } } ] } } ] }
